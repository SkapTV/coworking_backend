
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Empresas
 * 
 */
export type Empresas = {
  id: string
  nome: string
  descricaoEmp: string
  thumbnailEmp: string
}

/**
 * Model Projetos
 * 
 */
export type Projetos = {
  id: string
  nome: string
  descricao: string
  thumbnail: string
  empresaId: string | null
}

/**
 * Model Demos
 * 
 */
export type Demos = {
  id: string
  url: string
  projetoId: string | null
}

/**
 * Model ShowUp
 * 
 */
export type ShowUp = {
  id: string
  url: string
  projetoId: string | null
}

/**
 * Model Parceiros
 * 
 */
export type Parceiros = {
  id: string
  nome: string
  thumbnail: string
  descricao: string
  empresaId: string | null
}

/**
 * Model Usuarios
 * 
 */
export type Usuarios = {
  id: string
  nome: string
  email: string
  senha: string
  status: boolean
  Role: Role
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  ADM: 'ADM',
  EMPRESAJR: 'EMPRESAJR',
  COWORKING: 'COWORKING'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Empresas
 * const empresas = await prisma.empresas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Empresas
   * const empresas = await prisma.empresas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.empresas`: Exposes CRUD operations for the **Empresas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresas.findMany()
    * ```
    */
  get empresas(): Prisma.EmpresasDelegate<GlobalReject>;

  /**
   * `prisma.projetos`: Exposes CRUD operations for the **Projetos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projetos
    * const projetos = await prisma.projetos.findMany()
    * ```
    */
  get projetos(): Prisma.ProjetosDelegate<GlobalReject>;

  /**
   * `prisma.demos`: Exposes CRUD operations for the **Demos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Demos
    * const demos = await prisma.demos.findMany()
    * ```
    */
  get demos(): Prisma.DemosDelegate<GlobalReject>;

  /**
   * `prisma.showUp`: Exposes CRUD operations for the **ShowUp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShowUps
    * const showUps = await prisma.showUp.findMany()
    * ```
    */
  get showUp(): Prisma.ShowUpDelegate<GlobalReject>;

  /**
   * `prisma.parceiros`: Exposes CRUD operations for the **Parceiros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parceiros
    * const parceiros = await prisma.parceiros.findMany()
    * ```
    */
  get parceiros(): Prisma.ParceirosDelegate<GlobalReject>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Empresas: 'Empresas',
    Projetos: 'Projetos',
    Demos: 'Demos',
    ShowUp: 'ShowUp',
    Parceiros: 'Parceiros',
    Usuarios: 'Usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmpresasCountOutputType
   */


  export type EmpresasCountOutputType = {
    projetos: number
    parceiros: number
  }

  export type EmpresasCountOutputTypeSelect = {
    projetos?: boolean
    parceiros?: boolean
  }

  export type EmpresasCountOutputTypeGetPayload<S extends boolean | null | undefined | EmpresasCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EmpresasCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EmpresasCountOutputTypeArgs)
    ? EmpresasCountOutputType 
    : S extends { select: any } & (EmpresasCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EmpresasCountOutputType ? EmpresasCountOutputType[P] : never
  } 
      : EmpresasCountOutputType




  // Custom InputTypes

  /**
   * EmpresasCountOutputType without action
   */
  export type EmpresasCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmpresasCountOutputType
     * 
    **/
    select?: EmpresasCountOutputTypeSelect | null
  }



  /**
   * Count Type ProjetosCountOutputType
   */


  export type ProjetosCountOutputType = {
    demos: number
    showUp: number
  }

  export type ProjetosCountOutputTypeSelect = {
    demos?: boolean
    showUp?: boolean
  }

  export type ProjetosCountOutputTypeGetPayload<S extends boolean | null | undefined | ProjetosCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProjetosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProjetosCountOutputTypeArgs)
    ? ProjetosCountOutputType 
    : S extends { select: any } & (ProjetosCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProjetosCountOutputType ? ProjetosCountOutputType[P] : never
  } 
      : ProjetosCountOutputType




  // Custom InputTypes

  /**
   * ProjetosCountOutputType without action
   */
  export type ProjetosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjetosCountOutputType
     * 
    **/
    select?: ProjetosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Empresas
   */


  export type AggregateEmpresas = {
    _count: EmpresasCountAggregateOutputType | null
    _min: EmpresasMinAggregateOutputType | null
    _max: EmpresasMaxAggregateOutputType | null
  }

  export type EmpresasMinAggregateOutputType = {
    id: string | null
    nome: string | null
    descricaoEmp: string | null
    thumbnailEmp: string | null
  }

  export type EmpresasMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    descricaoEmp: string | null
    thumbnailEmp: string | null
  }

  export type EmpresasCountAggregateOutputType = {
    id: number
    nome: number
    descricaoEmp: number
    thumbnailEmp: number
    _all: number
  }


  export type EmpresasMinAggregateInputType = {
    id?: true
    nome?: true
    descricaoEmp?: true
    thumbnailEmp?: true
  }

  export type EmpresasMaxAggregateInputType = {
    id?: true
    nome?: true
    descricaoEmp?: true
    thumbnailEmp?: true
  }

  export type EmpresasCountAggregateInputType = {
    id?: true
    nome?: true
    descricaoEmp?: true
    thumbnailEmp?: true
    _all?: true
  }

  export type EmpresasAggregateArgs = {
    /**
     * Filter which Empresas to aggregate.
     * 
    **/
    where?: EmpresasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmpresasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresasMaxAggregateInputType
  }

  export type GetEmpresasAggregateType<T extends EmpresasAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresas[P]>
      : GetScalarType<T[P], AggregateEmpresas[P]>
  }




  export type EmpresasGroupByArgs = {
    where?: EmpresasWhereInput
    orderBy?: Enumerable<EmpresasOrderByWithAggregationInput>
    by: Array<EmpresasScalarFieldEnum>
    having?: EmpresasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresasCountAggregateInputType | true
    _min?: EmpresasMinAggregateInputType
    _max?: EmpresasMaxAggregateInputType
  }


  export type EmpresasGroupByOutputType = {
    id: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    _count: EmpresasCountAggregateOutputType | null
    _min: EmpresasMinAggregateOutputType | null
    _max: EmpresasMaxAggregateOutputType | null
  }

  type GetEmpresasGroupByPayload<T extends EmpresasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmpresasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresasGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresasGroupByOutputType[P]>
        }
      >
    >


  export type EmpresasSelect = {
    id?: boolean
    nome?: boolean
    descricaoEmp?: boolean
    thumbnailEmp?: boolean
    projetos?: boolean | ProjetosFindManyArgs
    parceiros?: boolean | ParceirosFindManyArgs
    _count?: boolean | EmpresasCountOutputTypeArgs
  }


  export type EmpresasInclude = {
    projetos?: boolean | ProjetosFindManyArgs
    parceiros?: boolean | ParceirosFindManyArgs
    _count?: boolean | EmpresasCountOutputTypeArgs
  } 

  export type EmpresasGetPayload<S extends boolean | null | undefined | EmpresasArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Empresas :
    S extends undefined ? never :
    S extends { include: any } & (EmpresasArgs | EmpresasFindManyArgs)
    ? Empresas  & {
    [P in TrueKeys<S['include']>]:
        P extends 'projetos' ? Array < ProjetosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'parceiros' ? Array < ParceirosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? EmpresasCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (EmpresasArgs | EmpresasFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'projetos' ? Array < ProjetosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'parceiros' ? Array < ParceirosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? EmpresasCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Empresas ? Empresas[P] : never
  } 
      : Empresas


  type EmpresasCountArgs = Merge<
    Omit<EmpresasFindManyArgs, 'select' | 'include'> & {
      select?: EmpresasCountAggregateInputType | true
    }
  >

  export interface EmpresasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Empresas that matches the filter.
     * @param {EmpresasFindUniqueArgs} args - Arguments to find a Empresas
     * @example
     * // Get one Empresas
     * const empresas = await prisma.empresas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmpresasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmpresasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Empresas'> extends True ? Prisma__EmpresasClient<EmpresasGetPayload<T>> : Prisma__EmpresasClient<EmpresasGetPayload<T> | null, null>

    /**
     * Find the first Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasFindFirstArgs} args - Arguments to find a Empresas
     * @example
     * // Get one Empresas
     * const empresas = await prisma.empresas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmpresasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmpresasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Empresas'> extends True ? Prisma__EmpresasClient<EmpresasGetPayload<T>> : Prisma__EmpresasClient<EmpresasGetPayload<T> | null, null>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresas.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresasWithIdOnly = await prisma.empresas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmpresasFindManyArgs>(
      args?: SelectSubset<T, EmpresasFindManyArgs>
    ): PrismaPromise<Array<EmpresasGetPayload<T>>>

    /**
     * Create a Empresas.
     * @param {EmpresasCreateArgs} args - Arguments to create a Empresas.
     * @example
     * // Create one Empresas
     * const Empresas = await prisma.empresas.create({
     *   data: {
     *     // ... data to create a Empresas
     *   }
     * })
     * 
    **/
    create<T extends EmpresasCreateArgs>(
      args: SelectSubset<T, EmpresasCreateArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Create many Empresas.
     *     @param {EmpresasCreateManyArgs} args - Arguments to create many Empresas.
     *     @example
     *     // Create many Empresas
     *     const empresas = await prisma.empresas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmpresasCreateManyArgs>(
      args?: SelectSubset<T, EmpresasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Empresas.
     * @param {EmpresasDeleteArgs} args - Arguments to delete one Empresas.
     * @example
     * // Delete one Empresas
     * const Empresas = await prisma.empresas.delete({
     *   where: {
     *     // ... filter to delete one Empresas
     *   }
     * })
     * 
    **/
    delete<T extends EmpresasDeleteArgs>(
      args: SelectSubset<T, EmpresasDeleteArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Update one Empresas.
     * @param {EmpresasUpdateArgs} args - Arguments to update one Empresas.
     * @example
     * // Update one Empresas
     * const empresas = await prisma.empresas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmpresasUpdateArgs>(
      args: SelectSubset<T, EmpresasUpdateArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresasDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmpresasDeleteManyArgs>(
      args?: SelectSubset<T, EmpresasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresas = await prisma.empresas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmpresasUpdateManyArgs>(
      args: SelectSubset<T, EmpresasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresas.
     * @param {EmpresasUpsertArgs} args - Arguments to update or create a Empresas.
     * @example
     * // Update or create a Empresas
     * const empresas = await prisma.empresas.upsert({
     *   create: {
     *     // ... data to create a Empresas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresas we want to update
     *   }
     * })
    **/
    upsert<T extends EmpresasUpsertArgs>(
      args: SelectSubset<T, EmpresasUpsertArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Find zero or more Empresas that matches the filter.
     * @param {EmpresasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const empresas = await prisma.empresas.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: EmpresasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Empresas.
     * @param {EmpresasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const empresas = await prisma.empresas.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: EmpresasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Empresas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {EmpresasFindUniqueOrThrowArgs} args - Arguments to find a Empresas
     * @example
     * // Get one Empresas
     * const empresas = await prisma.empresas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmpresasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EmpresasFindUniqueOrThrowArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Find the first Empresas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasFindFirstOrThrowArgs} args - Arguments to find a Empresas
     * @example
     * // Get one Empresas
     * const empresas = await prisma.empresas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmpresasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EmpresasFindFirstOrThrowArgs>
    ): Prisma__EmpresasClient<EmpresasGetPayload<T>>

    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresas.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresasCountArgs>(
      args?: Subset<T, EmpresasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresasAggregateArgs>(args: Subset<T, EmpresasAggregateArgs>): PrismaPromise<GetEmpresasAggregateType<T>>

    /**
     * Group by Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresasGroupByArgs['orderBy'] }
        : { orderBy?: EmpresasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmpresasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projetos<T extends ProjetosFindManyArgs= {}>(args?: Subset<T, ProjetosFindManyArgs>): PrismaPromise<Array<ProjetosGetPayload<T>>| Null>;

    parceiros<T extends ParceirosFindManyArgs= {}>(args?: Subset<T, ParceirosFindManyArgs>): PrismaPromise<Array<ParceirosGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Empresas base type for findUnique actions
   */
  export type EmpresasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * Filter, which Empresas to fetch.
     * 
    **/
    where: EmpresasWhereUniqueInput
  }

  /**
   * Empresas: findUnique
   */
  export interface EmpresasFindUniqueArgs extends EmpresasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Empresas base type for findFirst actions
   */
  export type EmpresasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * Filter, which Empresas to fetch.
     * 
    **/
    where?: EmpresasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     * 
    **/
    cursor?: EmpresasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     * 
    **/
    distinct?: Enumerable<EmpresasScalarFieldEnum>
  }

  /**
   * Empresas: findFirst
   */
  export interface EmpresasFindFirstArgs extends EmpresasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Empresas findMany
   */
  export type EmpresasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * Filter, which Empresas to fetch.
     * 
    **/
    where?: EmpresasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     * 
    **/
    cursor?: EmpresasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmpresasScalarFieldEnum>
  }


  /**
   * Empresas create
   */
  export type EmpresasCreateArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * The data needed to create a Empresas.
     * 
    **/
    data: XOR<EmpresasCreateInput, EmpresasUncheckedCreateInput>
  }


  /**
   * Empresas createMany
   */
  export type EmpresasCreateManyArgs = {
    /**
     * The data used to create many Empresas.
     * 
    **/
    data: Enumerable<EmpresasCreateManyInput>
  }


  /**
   * Empresas update
   */
  export type EmpresasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * The data needed to update a Empresas.
     * 
    **/
    data: XOR<EmpresasUpdateInput, EmpresasUncheckedUpdateInput>
    /**
     * Choose, which Empresas to update.
     * 
    **/
    where: EmpresasWhereUniqueInput
  }


  /**
   * Empresas updateMany
   */
  export type EmpresasUpdateManyArgs = {
    /**
     * The data used to update Empresas.
     * 
    **/
    data: XOR<EmpresasUpdateManyMutationInput, EmpresasUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     * 
    **/
    where?: EmpresasWhereInput
  }


  /**
   * Empresas upsert
   */
  export type EmpresasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * The filter to search for the Empresas to update in case it exists.
     * 
    **/
    where: EmpresasWhereUniqueInput
    /**
     * In case the Empresas found by the `where` argument doesn't exist, create a new Empresas with this data.
     * 
    **/
    create: XOR<EmpresasCreateInput, EmpresasUncheckedCreateInput>
    /**
     * In case the Empresas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmpresasUpdateInput, EmpresasUncheckedUpdateInput>
  }


  /**
   * Empresas delete
   */
  export type EmpresasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
    /**
     * Filter which Empresas to delete.
     * 
    **/
    where: EmpresasWhereUniqueInput
  }


  /**
   * Empresas deleteMany
   */
  export type EmpresasDeleteManyArgs = {
    /**
     * Filter which Empresas to delete
     * 
    **/
    where?: EmpresasWhereInput
  }


  /**
   * Empresas findRaw
   */
  export type EmpresasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Empresas aggregateRaw
   */
  export type EmpresasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Empresas: findUniqueOrThrow
   */
  export type EmpresasFindUniqueOrThrowArgs = EmpresasFindUniqueArgsBase
      

  /**
   * Empresas: findFirstOrThrow
   */
  export type EmpresasFindFirstOrThrowArgs = EmpresasFindFirstArgsBase
      

  /**
   * Empresas without action
   */
  export type EmpresasArgs = {
    /**
     * Select specific fields to fetch from the Empresas
     * 
    **/
    select?: EmpresasSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresasInclude | null
  }



  /**
   * Model Projetos
   */


  export type AggregateProjetos = {
    _count: ProjetosCountAggregateOutputType | null
    _min: ProjetosMinAggregateOutputType | null
    _max: ProjetosMaxAggregateOutputType | null
  }

  export type ProjetosMinAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    thumbnail: string | null
    empresaId: string | null
  }

  export type ProjetosMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    thumbnail: string | null
    empresaId: string | null
  }

  export type ProjetosCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    thumbnail: number
    empresaId: number
    _all: number
  }


  export type ProjetosMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    thumbnail?: true
    empresaId?: true
  }

  export type ProjetosMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    thumbnail?: true
    empresaId?: true
  }

  export type ProjetosCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    thumbnail?: true
    empresaId?: true
    _all?: true
  }

  export type ProjetosAggregateArgs = {
    /**
     * Filter which Projetos to aggregate.
     * 
    **/
    where?: ProjetosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjetosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjetosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projetos
    **/
    _count?: true | ProjetosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjetosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjetosMaxAggregateInputType
  }

  export type GetProjetosAggregateType<T extends ProjetosAggregateArgs> = {
        [P in keyof T & keyof AggregateProjetos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjetos[P]>
      : GetScalarType<T[P], AggregateProjetos[P]>
  }




  export type ProjetosGroupByArgs = {
    where?: ProjetosWhereInput
    orderBy?: Enumerable<ProjetosOrderByWithAggregationInput>
    by: Array<ProjetosScalarFieldEnum>
    having?: ProjetosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjetosCountAggregateInputType | true
    _min?: ProjetosMinAggregateInputType
    _max?: ProjetosMaxAggregateInputType
  }


  export type ProjetosGroupByOutputType = {
    id: string
    nome: string
    descricao: string
    thumbnail: string
    empresaId: string | null
    _count: ProjetosCountAggregateOutputType | null
    _min: ProjetosMinAggregateOutputType | null
    _max: ProjetosMaxAggregateOutputType | null
  }

  type GetProjetosGroupByPayload<T extends ProjetosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjetosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjetosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjetosGroupByOutputType[P]>
            : GetScalarType<T[P], ProjetosGroupByOutputType[P]>
        }
      >
    >


  export type ProjetosSelect = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    thumbnail?: boolean
    demos?: boolean | DemosFindManyArgs
    showUp?: boolean | ShowUpFindManyArgs
    empresaId?: boolean
    empresa?: boolean | EmpresasArgs
    _count?: boolean | ProjetosCountOutputTypeArgs
  }


  export type ProjetosInclude = {
    demos?: boolean | DemosFindManyArgs
    showUp?: boolean | ShowUpFindManyArgs
    empresa?: boolean | EmpresasArgs
    _count?: boolean | ProjetosCountOutputTypeArgs
  } 

  export type ProjetosGetPayload<S extends boolean | null | undefined | ProjetosArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Projetos :
    S extends undefined ? never :
    S extends { include: any } & (ProjetosArgs | ProjetosFindManyArgs)
    ? Projetos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'demos' ? Array < DemosGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'showUp' ? Array < ShowUpGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'empresa' ? EmpresasGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends '_count' ? ProjetosCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ProjetosArgs | ProjetosFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'demos' ? Array < DemosGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'showUp' ? Array < ShowUpGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'empresa' ? EmpresasGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends '_count' ? ProjetosCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Projetos ? Projetos[P] : never
  } 
      : Projetos


  type ProjetosCountArgs = Merge<
    Omit<ProjetosFindManyArgs, 'select' | 'include'> & {
      select?: ProjetosCountAggregateInputType | true
    }
  >

  export interface ProjetosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Projetos that matches the filter.
     * @param {ProjetosFindUniqueArgs} args - Arguments to find a Projetos
     * @example
     * // Get one Projetos
     * const projetos = await prisma.projetos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjetosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjetosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Projetos'> extends True ? Prisma__ProjetosClient<ProjetosGetPayload<T>> : Prisma__ProjetosClient<ProjetosGetPayload<T> | null, null>

    /**
     * Find the first Projetos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosFindFirstArgs} args - Arguments to find a Projetos
     * @example
     * // Get one Projetos
     * const projetos = await prisma.projetos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjetosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjetosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Projetos'> extends True ? Prisma__ProjetosClient<ProjetosGetPayload<T>> : Prisma__ProjetosClient<ProjetosGetPayload<T> | null, null>

    /**
     * Find zero or more Projetos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projetos
     * const projetos = await prisma.projetos.findMany()
     * 
     * // Get first 10 Projetos
     * const projetos = await prisma.projetos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projetosWithIdOnly = await prisma.projetos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjetosFindManyArgs>(
      args?: SelectSubset<T, ProjetosFindManyArgs>
    ): PrismaPromise<Array<ProjetosGetPayload<T>>>

    /**
     * Create a Projetos.
     * @param {ProjetosCreateArgs} args - Arguments to create a Projetos.
     * @example
     * // Create one Projetos
     * const Projetos = await prisma.projetos.create({
     *   data: {
     *     // ... data to create a Projetos
     *   }
     * })
     * 
    **/
    create<T extends ProjetosCreateArgs>(
      args: SelectSubset<T, ProjetosCreateArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Create many Projetos.
     *     @param {ProjetosCreateManyArgs} args - Arguments to create many Projetos.
     *     @example
     *     // Create many Projetos
     *     const projetos = await prisma.projetos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjetosCreateManyArgs>(
      args?: SelectSubset<T, ProjetosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Projetos.
     * @param {ProjetosDeleteArgs} args - Arguments to delete one Projetos.
     * @example
     * // Delete one Projetos
     * const Projetos = await prisma.projetos.delete({
     *   where: {
     *     // ... filter to delete one Projetos
     *   }
     * })
     * 
    **/
    delete<T extends ProjetosDeleteArgs>(
      args: SelectSubset<T, ProjetosDeleteArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Update one Projetos.
     * @param {ProjetosUpdateArgs} args - Arguments to update one Projetos.
     * @example
     * // Update one Projetos
     * const projetos = await prisma.projetos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjetosUpdateArgs>(
      args: SelectSubset<T, ProjetosUpdateArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Delete zero or more Projetos.
     * @param {ProjetosDeleteManyArgs} args - Arguments to filter Projetos to delete.
     * @example
     * // Delete a few Projetos
     * const { count } = await prisma.projetos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjetosDeleteManyArgs>(
      args?: SelectSubset<T, ProjetosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projetos
     * const projetos = await prisma.projetos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjetosUpdateManyArgs>(
      args: SelectSubset<T, ProjetosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Projetos.
     * @param {ProjetosUpsertArgs} args - Arguments to update or create a Projetos.
     * @example
     * // Update or create a Projetos
     * const projetos = await prisma.projetos.upsert({
     *   create: {
     *     // ... data to create a Projetos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projetos we want to update
     *   }
     * })
    **/
    upsert<T extends ProjetosUpsertArgs>(
      args: SelectSubset<T, ProjetosUpsertArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Find zero or more Projetos that matches the filter.
     * @param {ProjetosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const projetos = await prisma.projetos.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ProjetosFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Projetos.
     * @param {ProjetosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const projetos = await prisma.projetos.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ProjetosAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Projetos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProjetosFindUniqueOrThrowArgs} args - Arguments to find a Projetos
     * @example
     * // Get one Projetos
     * const projetos = await prisma.projetos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjetosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjetosFindUniqueOrThrowArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Find the first Projetos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosFindFirstOrThrowArgs} args - Arguments to find a Projetos
     * @example
     * // Get one Projetos
     * const projetos = await prisma.projetos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjetosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjetosFindFirstOrThrowArgs>
    ): Prisma__ProjetosClient<ProjetosGetPayload<T>>

    /**
     * Count the number of Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosCountArgs} args - Arguments to filter Projetos to count.
     * @example
     * // Count the number of Projetos
     * const count = await prisma.projetos.count({
     *   where: {
     *     // ... the filter for the Projetos we want to count
     *   }
     * })
    **/
    count<T extends ProjetosCountArgs>(
      args?: Subset<T, ProjetosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjetosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjetosAggregateArgs>(args: Subset<T, ProjetosAggregateArgs>): PrismaPromise<GetProjetosAggregateType<T>>

    /**
     * Group by Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjetosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjetosGroupByArgs['orderBy'] }
        : { orderBy?: ProjetosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjetosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjetosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Projetos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjetosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    demos<T extends DemosFindManyArgs= {}>(args?: Subset<T, DemosFindManyArgs>): PrismaPromise<Array<DemosGetPayload<T>>| Null>;

    showUp<T extends ShowUpFindManyArgs= {}>(args?: Subset<T, ShowUpFindManyArgs>): PrismaPromise<Array<ShowUpGetPayload<T>>| Null>;

    empresa<T extends EmpresasArgs= {}>(args?: Subset<T, EmpresasArgs>): Prisma__EmpresasClient<EmpresasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Projetos base type for findUnique actions
   */
  export type ProjetosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * Filter, which Projetos to fetch.
     * 
    **/
    where: ProjetosWhereUniqueInput
  }

  /**
   * Projetos: findUnique
   */
  export interface ProjetosFindUniqueArgs extends ProjetosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Projetos base type for findFirst actions
   */
  export type ProjetosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * Filter, which Projetos to fetch.
     * 
    **/
    where?: ProjetosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjetosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projetos.
     * 
    **/
    cursor?: ProjetosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projetos.
     * 
    **/
    distinct?: Enumerable<ProjetosScalarFieldEnum>
  }

  /**
   * Projetos: findFirst
   */
  export interface ProjetosFindFirstArgs extends ProjetosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Projetos findMany
   */
  export type ProjetosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * Filter, which Projetos to fetch.
     * 
    **/
    where?: ProjetosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjetosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projetos.
     * 
    **/
    cursor?: ProjetosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjetosScalarFieldEnum>
  }


  /**
   * Projetos create
   */
  export type ProjetosCreateArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * The data needed to create a Projetos.
     * 
    **/
    data: XOR<ProjetosCreateInput, ProjetosUncheckedCreateInput>
  }


  /**
   * Projetos createMany
   */
  export type ProjetosCreateManyArgs = {
    /**
     * The data used to create many Projetos.
     * 
    **/
    data: Enumerable<ProjetosCreateManyInput>
  }


  /**
   * Projetos update
   */
  export type ProjetosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * The data needed to update a Projetos.
     * 
    **/
    data: XOR<ProjetosUpdateInput, ProjetosUncheckedUpdateInput>
    /**
     * Choose, which Projetos to update.
     * 
    **/
    where: ProjetosWhereUniqueInput
  }


  /**
   * Projetos updateMany
   */
  export type ProjetosUpdateManyArgs = {
    /**
     * The data used to update Projetos.
     * 
    **/
    data: XOR<ProjetosUpdateManyMutationInput, ProjetosUncheckedUpdateManyInput>
    /**
     * Filter which Projetos to update
     * 
    **/
    where?: ProjetosWhereInput
  }


  /**
   * Projetos upsert
   */
  export type ProjetosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * The filter to search for the Projetos to update in case it exists.
     * 
    **/
    where: ProjetosWhereUniqueInput
    /**
     * In case the Projetos found by the `where` argument doesn't exist, create a new Projetos with this data.
     * 
    **/
    create: XOR<ProjetosCreateInput, ProjetosUncheckedCreateInput>
    /**
     * In case the Projetos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjetosUpdateInput, ProjetosUncheckedUpdateInput>
  }


  /**
   * Projetos delete
   */
  export type ProjetosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
    /**
     * Filter which Projetos to delete.
     * 
    **/
    where: ProjetosWhereUniqueInput
  }


  /**
   * Projetos deleteMany
   */
  export type ProjetosDeleteManyArgs = {
    /**
     * Filter which Projetos to delete
     * 
    **/
    where?: ProjetosWhereInput
  }


  /**
   * Projetos findRaw
   */
  export type ProjetosFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Projetos aggregateRaw
   */
  export type ProjetosAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Projetos: findUniqueOrThrow
   */
  export type ProjetosFindUniqueOrThrowArgs = ProjetosFindUniqueArgsBase
      

  /**
   * Projetos: findFirstOrThrow
   */
  export type ProjetosFindFirstOrThrowArgs = ProjetosFindFirstArgsBase
      

  /**
   * Projetos without action
   */
  export type ProjetosArgs = {
    /**
     * Select specific fields to fetch from the Projetos
     * 
    **/
    select?: ProjetosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjetosInclude | null
  }



  /**
   * Model Demos
   */


  export type AggregateDemos = {
    _count: DemosCountAggregateOutputType | null
    _min: DemosMinAggregateOutputType | null
    _max: DemosMaxAggregateOutputType | null
  }

  export type DemosMinAggregateOutputType = {
    id: string | null
    url: string | null
    projetoId: string | null
  }

  export type DemosMaxAggregateOutputType = {
    id: string | null
    url: string | null
    projetoId: string | null
  }

  export type DemosCountAggregateOutputType = {
    id: number
    url: number
    projetoId: number
    _all: number
  }


  export type DemosMinAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
  }

  export type DemosMaxAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
  }

  export type DemosCountAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
    _all?: true
  }

  export type DemosAggregateArgs = {
    /**
     * Filter which Demos to aggregate.
     * 
    **/
    where?: DemosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demos to fetch.
     * 
    **/
    orderBy?: Enumerable<DemosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DemosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Demos
    **/
    _count?: true | DemosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemosMaxAggregateInputType
  }

  export type GetDemosAggregateType<T extends DemosAggregateArgs> = {
        [P in keyof T & keyof AggregateDemos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemos[P]>
      : GetScalarType<T[P], AggregateDemos[P]>
  }




  export type DemosGroupByArgs = {
    where?: DemosWhereInput
    orderBy?: Enumerable<DemosOrderByWithAggregationInput>
    by: Array<DemosScalarFieldEnum>
    having?: DemosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemosCountAggregateInputType | true
    _min?: DemosMinAggregateInputType
    _max?: DemosMaxAggregateInputType
  }


  export type DemosGroupByOutputType = {
    id: string
    url: string
    projetoId: string | null
    _count: DemosCountAggregateOutputType | null
    _min: DemosMinAggregateOutputType | null
    _max: DemosMaxAggregateOutputType | null
  }

  type GetDemosGroupByPayload<T extends DemosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DemosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemosGroupByOutputType[P]>
            : GetScalarType<T[P], DemosGroupByOutputType[P]>
        }
      >
    >


  export type DemosSelect = {
    id?: boolean
    url?: boolean
    projetoId?: boolean
    projeto?: boolean | ProjetosArgs
  }


  export type DemosInclude = {
    projeto?: boolean | ProjetosArgs
  } 

  export type DemosGetPayload<S extends boolean | null | undefined | DemosArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Demos :
    S extends undefined ? never :
    S extends { include: any } & (DemosArgs | DemosFindManyArgs)
    ? Demos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'projeto' ? ProjetosGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (DemosArgs | DemosFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'projeto' ? ProjetosGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Demos ? Demos[P] : never
  } 
      : Demos


  type DemosCountArgs = Merge<
    Omit<DemosFindManyArgs, 'select' | 'include'> & {
      select?: DemosCountAggregateInputType | true
    }
  >

  export interface DemosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Demos that matches the filter.
     * @param {DemosFindUniqueArgs} args - Arguments to find a Demos
     * @example
     * // Get one Demos
     * const demos = await prisma.demos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DemosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DemosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Demos'> extends True ? Prisma__DemosClient<DemosGetPayload<T>> : Prisma__DemosClient<DemosGetPayload<T> | null, null>

    /**
     * Find the first Demos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosFindFirstArgs} args - Arguments to find a Demos
     * @example
     * // Get one Demos
     * const demos = await prisma.demos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DemosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DemosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Demos'> extends True ? Prisma__DemosClient<DemosGetPayload<T>> : Prisma__DemosClient<DemosGetPayload<T> | null, null>

    /**
     * Find zero or more Demos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Demos
     * const demos = await prisma.demos.findMany()
     * 
     * // Get first 10 Demos
     * const demos = await prisma.demos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demosWithIdOnly = await prisma.demos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DemosFindManyArgs>(
      args?: SelectSubset<T, DemosFindManyArgs>
    ): PrismaPromise<Array<DemosGetPayload<T>>>

    /**
     * Create a Demos.
     * @param {DemosCreateArgs} args - Arguments to create a Demos.
     * @example
     * // Create one Demos
     * const Demos = await prisma.demos.create({
     *   data: {
     *     // ... data to create a Demos
     *   }
     * })
     * 
    **/
    create<T extends DemosCreateArgs>(
      args: SelectSubset<T, DemosCreateArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Create many Demos.
     *     @param {DemosCreateManyArgs} args - Arguments to create many Demos.
     *     @example
     *     // Create many Demos
     *     const demos = await prisma.demos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DemosCreateManyArgs>(
      args?: SelectSubset<T, DemosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Demos.
     * @param {DemosDeleteArgs} args - Arguments to delete one Demos.
     * @example
     * // Delete one Demos
     * const Demos = await prisma.demos.delete({
     *   where: {
     *     // ... filter to delete one Demos
     *   }
     * })
     * 
    **/
    delete<T extends DemosDeleteArgs>(
      args: SelectSubset<T, DemosDeleteArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Update one Demos.
     * @param {DemosUpdateArgs} args - Arguments to update one Demos.
     * @example
     * // Update one Demos
     * const demos = await prisma.demos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DemosUpdateArgs>(
      args: SelectSubset<T, DemosUpdateArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Delete zero or more Demos.
     * @param {DemosDeleteManyArgs} args - Arguments to filter Demos to delete.
     * @example
     * // Delete a few Demos
     * const { count } = await prisma.demos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DemosDeleteManyArgs>(
      args?: SelectSubset<T, DemosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Demos
     * const demos = await prisma.demos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DemosUpdateManyArgs>(
      args: SelectSubset<T, DemosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Demos.
     * @param {DemosUpsertArgs} args - Arguments to update or create a Demos.
     * @example
     * // Update or create a Demos
     * const demos = await prisma.demos.upsert({
     *   create: {
     *     // ... data to create a Demos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Demos we want to update
     *   }
     * })
    **/
    upsert<T extends DemosUpsertArgs>(
      args: SelectSubset<T, DemosUpsertArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Find zero or more Demos that matches the filter.
     * @param {DemosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const demos = await prisma.demos.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DemosFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Demos.
     * @param {DemosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const demos = await prisma.demos.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DemosAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Demos that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DemosFindUniqueOrThrowArgs} args - Arguments to find a Demos
     * @example
     * // Get one Demos
     * const demos = await prisma.demos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DemosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DemosFindUniqueOrThrowArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Find the first Demos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosFindFirstOrThrowArgs} args - Arguments to find a Demos
     * @example
     * // Get one Demos
     * const demos = await prisma.demos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DemosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DemosFindFirstOrThrowArgs>
    ): Prisma__DemosClient<DemosGetPayload<T>>

    /**
     * Count the number of Demos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosCountArgs} args - Arguments to filter Demos to count.
     * @example
     * // Count the number of Demos
     * const count = await prisma.demos.count({
     *   where: {
     *     // ... the filter for the Demos we want to count
     *   }
     * })
    **/
    count<T extends DemosCountArgs>(
      args?: Subset<T, DemosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Demos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemosAggregateArgs>(args: Subset<T, DemosAggregateArgs>): PrismaPromise<GetDemosAggregateType<T>>

    /**
     * Group by Demos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemosGroupByArgs['orderBy'] }
        : { orderBy?: DemosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Demos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DemosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projeto<T extends ProjetosArgs= {}>(args?: Subset<T, ProjetosArgs>): Prisma__ProjetosClient<ProjetosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Demos base type for findUnique actions
   */
  export type DemosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * Filter, which Demos to fetch.
     * 
    **/
    where: DemosWhereUniqueInput
  }

  /**
   * Demos: findUnique
   */
  export interface DemosFindUniqueArgs extends DemosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Demos base type for findFirst actions
   */
  export type DemosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * Filter, which Demos to fetch.
     * 
    **/
    where?: DemosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demos to fetch.
     * 
    **/
    orderBy?: Enumerable<DemosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demos.
     * 
    **/
    cursor?: DemosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demos.
     * 
    **/
    distinct?: Enumerable<DemosScalarFieldEnum>
  }

  /**
   * Demos: findFirst
   */
  export interface DemosFindFirstArgs extends DemosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Demos findMany
   */
  export type DemosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * Filter, which Demos to fetch.
     * 
    **/
    where?: DemosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demos to fetch.
     * 
    **/
    orderBy?: Enumerable<DemosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Demos.
     * 
    **/
    cursor?: DemosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DemosScalarFieldEnum>
  }


  /**
   * Demos create
   */
  export type DemosCreateArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * The data needed to create a Demos.
     * 
    **/
    data: XOR<DemosCreateInput, DemosUncheckedCreateInput>
  }


  /**
   * Demos createMany
   */
  export type DemosCreateManyArgs = {
    /**
     * The data used to create many Demos.
     * 
    **/
    data: Enumerable<DemosCreateManyInput>
  }


  /**
   * Demos update
   */
  export type DemosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * The data needed to update a Demos.
     * 
    **/
    data: XOR<DemosUpdateInput, DemosUncheckedUpdateInput>
    /**
     * Choose, which Demos to update.
     * 
    **/
    where: DemosWhereUniqueInput
  }


  /**
   * Demos updateMany
   */
  export type DemosUpdateManyArgs = {
    /**
     * The data used to update Demos.
     * 
    **/
    data: XOR<DemosUpdateManyMutationInput, DemosUncheckedUpdateManyInput>
    /**
     * Filter which Demos to update
     * 
    **/
    where?: DemosWhereInput
  }


  /**
   * Demos upsert
   */
  export type DemosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * The filter to search for the Demos to update in case it exists.
     * 
    **/
    where: DemosWhereUniqueInput
    /**
     * In case the Demos found by the `where` argument doesn't exist, create a new Demos with this data.
     * 
    **/
    create: XOR<DemosCreateInput, DemosUncheckedCreateInput>
    /**
     * In case the Demos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DemosUpdateInput, DemosUncheckedUpdateInput>
  }


  /**
   * Demos delete
   */
  export type DemosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
    /**
     * Filter which Demos to delete.
     * 
    **/
    where: DemosWhereUniqueInput
  }


  /**
   * Demos deleteMany
   */
  export type DemosDeleteManyArgs = {
    /**
     * Filter which Demos to delete
     * 
    **/
    where?: DemosWhereInput
  }


  /**
   * Demos findRaw
   */
  export type DemosFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Demos aggregateRaw
   */
  export type DemosAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Demos: findUniqueOrThrow
   */
  export type DemosFindUniqueOrThrowArgs = DemosFindUniqueArgsBase
      

  /**
   * Demos: findFirstOrThrow
   */
  export type DemosFindFirstOrThrowArgs = DemosFindFirstArgsBase
      

  /**
   * Demos without action
   */
  export type DemosArgs = {
    /**
     * Select specific fields to fetch from the Demos
     * 
    **/
    select?: DemosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DemosInclude | null
  }



  /**
   * Model ShowUp
   */


  export type AggregateShowUp = {
    _count: ShowUpCountAggregateOutputType | null
    _min: ShowUpMinAggregateOutputType | null
    _max: ShowUpMaxAggregateOutputType | null
  }

  export type ShowUpMinAggregateOutputType = {
    id: string | null
    url: string | null
    projetoId: string | null
  }

  export type ShowUpMaxAggregateOutputType = {
    id: string | null
    url: string | null
    projetoId: string | null
  }

  export type ShowUpCountAggregateOutputType = {
    id: number
    url: number
    projetoId: number
    _all: number
  }


  export type ShowUpMinAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
  }

  export type ShowUpMaxAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
  }

  export type ShowUpCountAggregateInputType = {
    id?: true
    url?: true
    projetoId?: true
    _all?: true
  }

  export type ShowUpAggregateArgs = {
    /**
     * Filter which ShowUp to aggregate.
     * 
    **/
    where?: ShowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowUps to fetch.
     * 
    **/
    orderBy?: Enumerable<ShowUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowUps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowUps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShowUps
    **/
    _count?: true | ShowUpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShowUpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShowUpMaxAggregateInputType
  }

  export type GetShowUpAggregateType<T extends ShowUpAggregateArgs> = {
        [P in keyof T & keyof AggregateShowUp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShowUp[P]>
      : GetScalarType<T[P], AggregateShowUp[P]>
  }




  export type ShowUpGroupByArgs = {
    where?: ShowUpWhereInput
    orderBy?: Enumerable<ShowUpOrderByWithAggregationInput>
    by: Array<ShowUpScalarFieldEnum>
    having?: ShowUpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShowUpCountAggregateInputType | true
    _min?: ShowUpMinAggregateInputType
    _max?: ShowUpMaxAggregateInputType
  }


  export type ShowUpGroupByOutputType = {
    id: string
    url: string
    projetoId: string | null
    _count: ShowUpCountAggregateOutputType | null
    _min: ShowUpMinAggregateOutputType | null
    _max: ShowUpMaxAggregateOutputType | null
  }

  type GetShowUpGroupByPayload<T extends ShowUpGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShowUpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShowUpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShowUpGroupByOutputType[P]>
            : GetScalarType<T[P], ShowUpGroupByOutputType[P]>
        }
      >
    >


  export type ShowUpSelect = {
    id?: boolean
    url?: boolean
    projetoId?: boolean
    projeto?: boolean | ProjetosArgs
  }


  export type ShowUpInclude = {
    projeto?: boolean | ProjetosArgs
  } 

  export type ShowUpGetPayload<S extends boolean | null | undefined | ShowUpArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ShowUp :
    S extends undefined ? never :
    S extends { include: any } & (ShowUpArgs | ShowUpFindManyArgs)
    ? ShowUp  & {
    [P in TrueKeys<S['include']>]:
        P extends 'projeto' ? ProjetosGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (ShowUpArgs | ShowUpFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'projeto' ? ProjetosGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof ShowUp ? ShowUp[P] : never
  } 
      : ShowUp


  type ShowUpCountArgs = Merge<
    Omit<ShowUpFindManyArgs, 'select' | 'include'> & {
      select?: ShowUpCountAggregateInputType | true
    }
  >

  export interface ShowUpDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ShowUp that matches the filter.
     * @param {ShowUpFindUniqueArgs} args - Arguments to find a ShowUp
     * @example
     * // Get one ShowUp
     * const showUp = await prisma.showUp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShowUpFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShowUpFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShowUp'> extends True ? Prisma__ShowUpClient<ShowUpGetPayload<T>> : Prisma__ShowUpClient<ShowUpGetPayload<T> | null, null>

    /**
     * Find the first ShowUp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpFindFirstArgs} args - Arguments to find a ShowUp
     * @example
     * // Get one ShowUp
     * const showUp = await prisma.showUp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShowUpFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShowUpFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShowUp'> extends True ? Prisma__ShowUpClient<ShowUpGetPayload<T>> : Prisma__ShowUpClient<ShowUpGetPayload<T> | null, null>

    /**
     * Find zero or more ShowUps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShowUps
     * const showUps = await prisma.showUp.findMany()
     * 
     * // Get first 10 ShowUps
     * const showUps = await prisma.showUp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const showUpWithIdOnly = await prisma.showUp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShowUpFindManyArgs>(
      args?: SelectSubset<T, ShowUpFindManyArgs>
    ): PrismaPromise<Array<ShowUpGetPayload<T>>>

    /**
     * Create a ShowUp.
     * @param {ShowUpCreateArgs} args - Arguments to create a ShowUp.
     * @example
     * // Create one ShowUp
     * const ShowUp = await prisma.showUp.create({
     *   data: {
     *     // ... data to create a ShowUp
     *   }
     * })
     * 
    **/
    create<T extends ShowUpCreateArgs>(
      args: SelectSubset<T, ShowUpCreateArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Create many ShowUps.
     *     @param {ShowUpCreateManyArgs} args - Arguments to create many ShowUps.
     *     @example
     *     // Create many ShowUps
     *     const showUp = await prisma.showUp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShowUpCreateManyArgs>(
      args?: SelectSubset<T, ShowUpCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShowUp.
     * @param {ShowUpDeleteArgs} args - Arguments to delete one ShowUp.
     * @example
     * // Delete one ShowUp
     * const ShowUp = await prisma.showUp.delete({
     *   where: {
     *     // ... filter to delete one ShowUp
     *   }
     * })
     * 
    **/
    delete<T extends ShowUpDeleteArgs>(
      args: SelectSubset<T, ShowUpDeleteArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Update one ShowUp.
     * @param {ShowUpUpdateArgs} args - Arguments to update one ShowUp.
     * @example
     * // Update one ShowUp
     * const showUp = await prisma.showUp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShowUpUpdateArgs>(
      args: SelectSubset<T, ShowUpUpdateArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Delete zero or more ShowUps.
     * @param {ShowUpDeleteManyArgs} args - Arguments to filter ShowUps to delete.
     * @example
     * // Delete a few ShowUps
     * const { count } = await prisma.showUp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShowUpDeleteManyArgs>(
      args?: SelectSubset<T, ShowUpDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShowUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShowUps
     * const showUp = await prisma.showUp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShowUpUpdateManyArgs>(
      args: SelectSubset<T, ShowUpUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShowUp.
     * @param {ShowUpUpsertArgs} args - Arguments to update or create a ShowUp.
     * @example
     * // Update or create a ShowUp
     * const showUp = await prisma.showUp.upsert({
     *   create: {
     *     // ... data to create a ShowUp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShowUp we want to update
     *   }
     * })
    **/
    upsert<T extends ShowUpUpsertArgs>(
      args: SelectSubset<T, ShowUpUpsertArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Find zero or more ShowUps that matches the filter.
     * @param {ShowUpFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const showUp = await prisma.showUp.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ShowUpFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ShowUp.
     * @param {ShowUpAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const showUp = await prisma.showUp.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ShowUpAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one ShowUp that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ShowUpFindUniqueOrThrowArgs} args - Arguments to find a ShowUp
     * @example
     * // Get one ShowUp
     * const showUp = await prisma.showUp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShowUpFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShowUpFindUniqueOrThrowArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Find the first ShowUp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpFindFirstOrThrowArgs} args - Arguments to find a ShowUp
     * @example
     * // Get one ShowUp
     * const showUp = await prisma.showUp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShowUpFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShowUpFindFirstOrThrowArgs>
    ): Prisma__ShowUpClient<ShowUpGetPayload<T>>

    /**
     * Count the number of ShowUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpCountArgs} args - Arguments to filter ShowUps to count.
     * @example
     * // Count the number of ShowUps
     * const count = await prisma.showUp.count({
     *   where: {
     *     // ... the filter for the ShowUps we want to count
     *   }
     * })
    **/
    count<T extends ShowUpCountArgs>(
      args?: Subset<T, ShowUpCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShowUpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShowUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShowUpAggregateArgs>(args: Subset<T, ShowUpAggregateArgs>): PrismaPromise<GetShowUpAggregateType<T>>

    /**
     * Group by ShowUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShowUpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShowUpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShowUpGroupByArgs['orderBy'] }
        : { orderBy?: ShowUpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShowUpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShowUpGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ShowUp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShowUpClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projeto<T extends ProjetosArgs= {}>(args?: Subset<T, ProjetosArgs>): Prisma__ProjetosClient<ProjetosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ShowUp base type for findUnique actions
   */
  export type ShowUpFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * Filter, which ShowUp to fetch.
     * 
    **/
    where: ShowUpWhereUniqueInput
  }

  /**
   * ShowUp: findUnique
   */
  export interface ShowUpFindUniqueArgs extends ShowUpFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShowUp base type for findFirst actions
   */
  export type ShowUpFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * Filter, which ShowUp to fetch.
     * 
    **/
    where?: ShowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowUps to fetch.
     * 
    **/
    orderBy?: Enumerable<ShowUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShowUps.
     * 
    **/
    cursor?: ShowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowUps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowUps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShowUps.
     * 
    **/
    distinct?: Enumerable<ShowUpScalarFieldEnum>
  }

  /**
   * ShowUp: findFirst
   */
  export interface ShowUpFindFirstArgs extends ShowUpFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShowUp findMany
   */
  export type ShowUpFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * Filter, which ShowUps to fetch.
     * 
    **/
    where?: ShowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShowUps to fetch.
     * 
    **/
    orderBy?: Enumerable<ShowUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShowUps.
     * 
    **/
    cursor?: ShowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShowUps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShowUps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShowUpScalarFieldEnum>
  }


  /**
   * ShowUp create
   */
  export type ShowUpCreateArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * The data needed to create a ShowUp.
     * 
    **/
    data: XOR<ShowUpCreateInput, ShowUpUncheckedCreateInput>
  }


  /**
   * ShowUp createMany
   */
  export type ShowUpCreateManyArgs = {
    /**
     * The data used to create many ShowUps.
     * 
    **/
    data: Enumerable<ShowUpCreateManyInput>
  }


  /**
   * ShowUp update
   */
  export type ShowUpUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * The data needed to update a ShowUp.
     * 
    **/
    data: XOR<ShowUpUpdateInput, ShowUpUncheckedUpdateInput>
    /**
     * Choose, which ShowUp to update.
     * 
    **/
    where: ShowUpWhereUniqueInput
  }


  /**
   * ShowUp updateMany
   */
  export type ShowUpUpdateManyArgs = {
    /**
     * The data used to update ShowUps.
     * 
    **/
    data: XOR<ShowUpUpdateManyMutationInput, ShowUpUncheckedUpdateManyInput>
    /**
     * Filter which ShowUps to update
     * 
    **/
    where?: ShowUpWhereInput
  }


  /**
   * ShowUp upsert
   */
  export type ShowUpUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * The filter to search for the ShowUp to update in case it exists.
     * 
    **/
    where: ShowUpWhereUniqueInput
    /**
     * In case the ShowUp found by the `where` argument doesn't exist, create a new ShowUp with this data.
     * 
    **/
    create: XOR<ShowUpCreateInput, ShowUpUncheckedCreateInput>
    /**
     * In case the ShowUp was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShowUpUpdateInput, ShowUpUncheckedUpdateInput>
  }


  /**
   * ShowUp delete
   */
  export type ShowUpDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
    /**
     * Filter which ShowUp to delete.
     * 
    **/
    where: ShowUpWhereUniqueInput
  }


  /**
   * ShowUp deleteMany
   */
  export type ShowUpDeleteManyArgs = {
    /**
     * Filter which ShowUps to delete
     * 
    **/
    where?: ShowUpWhereInput
  }


  /**
   * ShowUp findRaw
   */
  export type ShowUpFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * ShowUp aggregateRaw
   */
  export type ShowUpAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * ShowUp: findUniqueOrThrow
   */
  export type ShowUpFindUniqueOrThrowArgs = ShowUpFindUniqueArgsBase
      

  /**
   * ShowUp: findFirstOrThrow
   */
  export type ShowUpFindFirstOrThrowArgs = ShowUpFindFirstArgsBase
      

  /**
   * ShowUp without action
   */
  export type ShowUpArgs = {
    /**
     * Select specific fields to fetch from the ShowUp
     * 
    **/
    select?: ShowUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShowUpInclude | null
  }



  /**
   * Model Parceiros
   */


  export type AggregateParceiros = {
    _count: ParceirosCountAggregateOutputType | null
    _min: ParceirosMinAggregateOutputType | null
    _max: ParceirosMaxAggregateOutputType | null
  }

  export type ParceirosMinAggregateOutputType = {
    id: string | null
    nome: string | null
    thumbnail: string | null
    descricao: string | null
    empresaId: string | null
  }

  export type ParceirosMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    thumbnail: string | null
    descricao: string | null
    empresaId: string | null
  }

  export type ParceirosCountAggregateOutputType = {
    id: number
    nome: number
    thumbnail: number
    descricao: number
    empresaId: number
    _all: number
  }


  export type ParceirosMinAggregateInputType = {
    id?: true
    nome?: true
    thumbnail?: true
    descricao?: true
    empresaId?: true
  }

  export type ParceirosMaxAggregateInputType = {
    id?: true
    nome?: true
    thumbnail?: true
    descricao?: true
    empresaId?: true
  }

  export type ParceirosCountAggregateInputType = {
    id?: true
    nome?: true
    thumbnail?: true
    descricao?: true
    empresaId?: true
    _all?: true
  }

  export type ParceirosAggregateArgs = {
    /**
     * Filter which Parceiros to aggregate.
     * 
    **/
    where?: ParceirosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     * 
    **/
    orderBy?: Enumerable<ParceirosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ParceirosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parceiros
    **/
    _count?: true | ParceirosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParceirosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParceirosMaxAggregateInputType
  }

  export type GetParceirosAggregateType<T extends ParceirosAggregateArgs> = {
        [P in keyof T & keyof AggregateParceiros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParceiros[P]>
      : GetScalarType<T[P], AggregateParceiros[P]>
  }




  export type ParceirosGroupByArgs = {
    where?: ParceirosWhereInput
    orderBy?: Enumerable<ParceirosOrderByWithAggregationInput>
    by: Array<ParceirosScalarFieldEnum>
    having?: ParceirosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParceirosCountAggregateInputType | true
    _min?: ParceirosMinAggregateInputType
    _max?: ParceirosMaxAggregateInputType
  }


  export type ParceirosGroupByOutputType = {
    id: string
    nome: string
    thumbnail: string
    descricao: string
    empresaId: string | null
    _count: ParceirosCountAggregateOutputType | null
    _min: ParceirosMinAggregateOutputType | null
    _max: ParceirosMaxAggregateOutputType | null
  }

  type GetParceirosGroupByPayload<T extends ParceirosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ParceirosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParceirosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParceirosGroupByOutputType[P]>
            : GetScalarType<T[P], ParceirosGroupByOutputType[P]>
        }
      >
    >


  export type ParceirosSelect = {
    id?: boolean
    nome?: boolean
    thumbnail?: boolean
    descricao?: boolean
    empresa?: boolean | EmpresasArgs
    empresaId?: boolean
  }


  export type ParceirosInclude = {
    empresa?: boolean | EmpresasArgs
  } 

  export type ParceirosGetPayload<S extends boolean | null | undefined | ParceirosArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Parceiros :
    S extends undefined ? never :
    S extends { include: any } & (ParceirosArgs | ParceirosFindManyArgs)
    ? Parceiros  & {
    [P in TrueKeys<S['include']>]:
        P extends 'empresa' ? EmpresasGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (ParceirosArgs | ParceirosFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'empresa' ? EmpresasGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Parceiros ? Parceiros[P] : never
  } 
      : Parceiros


  type ParceirosCountArgs = Merge<
    Omit<ParceirosFindManyArgs, 'select' | 'include'> & {
      select?: ParceirosCountAggregateInputType | true
    }
  >

  export interface ParceirosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Parceiros that matches the filter.
     * @param {ParceirosFindUniqueArgs} args - Arguments to find a Parceiros
     * @example
     * // Get one Parceiros
     * const parceiros = await prisma.parceiros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParceirosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParceirosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Parceiros'> extends True ? Prisma__ParceirosClient<ParceirosGetPayload<T>> : Prisma__ParceirosClient<ParceirosGetPayload<T> | null, null>

    /**
     * Find the first Parceiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosFindFirstArgs} args - Arguments to find a Parceiros
     * @example
     * // Get one Parceiros
     * const parceiros = await prisma.parceiros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParceirosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParceirosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Parceiros'> extends True ? Prisma__ParceirosClient<ParceirosGetPayload<T>> : Prisma__ParceirosClient<ParceirosGetPayload<T> | null, null>

    /**
     * Find zero or more Parceiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parceiros
     * const parceiros = await prisma.parceiros.findMany()
     * 
     * // Get first 10 Parceiros
     * const parceiros = await prisma.parceiros.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parceirosWithIdOnly = await prisma.parceiros.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParceirosFindManyArgs>(
      args?: SelectSubset<T, ParceirosFindManyArgs>
    ): PrismaPromise<Array<ParceirosGetPayload<T>>>

    /**
     * Create a Parceiros.
     * @param {ParceirosCreateArgs} args - Arguments to create a Parceiros.
     * @example
     * // Create one Parceiros
     * const Parceiros = await prisma.parceiros.create({
     *   data: {
     *     // ... data to create a Parceiros
     *   }
     * })
     * 
    **/
    create<T extends ParceirosCreateArgs>(
      args: SelectSubset<T, ParceirosCreateArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Create many Parceiros.
     *     @param {ParceirosCreateManyArgs} args - Arguments to create many Parceiros.
     *     @example
     *     // Create many Parceiros
     *     const parceiros = await prisma.parceiros.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParceirosCreateManyArgs>(
      args?: SelectSubset<T, ParceirosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Parceiros.
     * @param {ParceirosDeleteArgs} args - Arguments to delete one Parceiros.
     * @example
     * // Delete one Parceiros
     * const Parceiros = await prisma.parceiros.delete({
     *   where: {
     *     // ... filter to delete one Parceiros
     *   }
     * })
     * 
    **/
    delete<T extends ParceirosDeleteArgs>(
      args: SelectSubset<T, ParceirosDeleteArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Update one Parceiros.
     * @param {ParceirosUpdateArgs} args - Arguments to update one Parceiros.
     * @example
     * // Update one Parceiros
     * const parceiros = await prisma.parceiros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParceirosUpdateArgs>(
      args: SelectSubset<T, ParceirosUpdateArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Delete zero or more Parceiros.
     * @param {ParceirosDeleteManyArgs} args - Arguments to filter Parceiros to delete.
     * @example
     * // Delete a few Parceiros
     * const { count } = await prisma.parceiros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParceirosDeleteManyArgs>(
      args?: SelectSubset<T, ParceirosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parceiros
     * const parceiros = await prisma.parceiros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParceirosUpdateManyArgs>(
      args: SelectSubset<T, ParceirosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Parceiros.
     * @param {ParceirosUpsertArgs} args - Arguments to update or create a Parceiros.
     * @example
     * // Update or create a Parceiros
     * const parceiros = await prisma.parceiros.upsert({
     *   create: {
     *     // ... data to create a Parceiros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parceiros we want to update
     *   }
     * })
    **/
    upsert<T extends ParceirosUpsertArgs>(
      args: SelectSubset<T, ParceirosUpsertArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Find zero or more Parceiros that matches the filter.
     * @param {ParceirosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const parceiros = await prisma.parceiros.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ParceirosFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Parceiros.
     * @param {ParceirosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const parceiros = await prisma.parceiros.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ParceirosAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Parceiros that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ParceirosFindUniqueOrThrowArgs} args - Arguments to find a Parceiros
     * @example
     * // Get one Parceiros
     * const parceiros = await prisma.parceiros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParceirosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ParceirosFindUniqueOrThrowArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Find the first Parceiros that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosFindFirstOrThrowArgs} args - Arguments to find a Parceiros
     * @example
     * // Get one Parceiros
     * const parceiros = await prisma.parceiros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParceirosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ParceirosFindFirstOrThrowArgs>
    ): Prisma__ParceirosClient<ParceirosGetPayload<T>>

    /**
     * Count the number of Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosCountArgs} args - Arguments to filter Parceiros to count.
     * @example
     * // Count the number of Parceiros
     * const count = await prisma.parceiros.count({
     *   where: {
     *     // ... the filter for the Parceiros we want to count
     *   }
     * })
    **/
    count<T extends ParceirosCountArgs>(
      args?: Subset<T, ParceirosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParceirosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParceirosAggregateArgs>(args: Subset<T, ParceirosAggregateArgs>): PrismaPromise<GetParceirosAggregateType<T>>

    /**
     * Group by Parceiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParceirosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParceirosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParceirosGroupByArgs['orderBy'] }
        : { orderBy?: ParceirosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParceirosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParceirosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Parceiros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParceirosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    empresa<T extends EmpresasArgs= {}>(args?: Subset<T, EmpresasArgs>): Prisma__EmpresasClient<EmpresasGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Parceiros base type for findUnique actions
   */
  export type ParceirosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * Filter, which Parceiros to fetch.
     * 
    **/
    where: ParceirosWhereUniqueInput
  }

  /**
   * Parceiros: findUnique
   */
  export interface ParceirosFindUniqueArgs extends ParceirosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Parceiros base type for findFirst actions
   */
  export type ParceirosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * Filter, which Parceiros to fetch.
     * 
    **/
    where?: ParceirosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     * 
    **/
    orderBy?: Enumerable<ParceirosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parceiros.
     * 
    **/
    cursor?: ParceirosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parceiros.
     * 
    **/
    distinct?: Enumerable<ParceirosScalarFieldEnum>
  }

  /**
   * Parceiros: findFirst
   */
  export interface ParceirosFindFirstArgs extends ParceirosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Parceiros findMany
   */
  export type ParceirosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * Filter, which Parceiros to fetch.
     * 
    **/
    where?: ParceirosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parceiros to fetch.
     * 
    **/
    orderBy?: Enumerable<ParceirosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parceiros.
     * 
    **/
    cursor?: ParceirosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parceiros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parceiros.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ParceirosScalarFieldEnum>
  }


  /**
   * Parceiros create
   */
  export type ParceirosCreateArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * The data needed to create a Parceiros.
     * 
    **/
    data: XOR<ParceirosCreateInput, ParceirosUncheckedCreateInput>
  }


  /**
   * Parceiros createMany
   */
  export type ParceirosCreateManyArgs = {
    /**
     * The data used to create many Parceiros.
     * 
    **/
    data: Enumerable<ParceirosCreateManyInput>
  }


  /**
   * Parceiros update
   */
  export type ParceirosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * The data needed to update a Parceiros.
     * 
    **/
    data: XOR<ParceirosUpdateInput, ParceirosUncheckedUpdateInput>
    /**
     * Choose, which Parceiros to update.
     * 
    **/
    where: ParceirosWhereUniqueInput
  }


  /**
   * Parceiros updateMany
   */
  export type ParceirosUpdateManyArgs = {
    /**
     * The data used to update Parceiros.
     * 
    **/
    data: XOR<ParceirosUpdateManyMutationInput, ParceirosUncheckedUpdateManyInput>
    /**
     * Filter which Parceiros to update
     * 
    **/
    where?: ParceirosWhereInput
  }


  /**
   * Parceiros upsert
   */
  export type ParceirosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * The filter to search for the Parceiros to update in case it exists.
     * 
    **/
    where: ParceirosWhereUniqueInput
    /**
     * In case the Parceiros found by the `where` argument doesn't exist, create a new Parceiros with this data.
     * 
    **/
    create: XOR<ParceirosCreateInput, ParceirosUncheckedCreateInput>
    /**
     * In case the Parceiros was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ParceirosUpdateInput, ParceirosUncheckedUpdateInput>
  }


  /**
   * Parceiros delete
   */
  export type ParceirosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
    /**
     * Filter which Parceiros to delete.
     * 
    **/
    where: ParceirosWhereUniqueInput
  }


  /**
   * Parceiros deleteMany
   */
  export type ParceirosDeleteManyArgs = {
    /**
     * Filter which Parceiros to delete
     * 
    **/
    where?: ParceirosWhereInput
  }


  /**
   * Parceiros findRaw
   */
  export type ParceirosFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Parceiros aggregateRaw
   */
  export type ParceirosAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Parceiros: findUniqueOrThrow
   */
  export type ParceirosFindUniqueOrThrowArgs = ParceirosFindUniqueArgsBase
      

  /**
   * Parceiros: findFirstOrThrow
   */
  export type ParceirosFindFirstOrThrowArgs = ParceirosFindFirstArgsBase
      

  /**
   * Parceiros without action
   */
  export type ParceirosArgs = {
    /**
     * Select specific fields to fetch from the Parceiros
     * 
    **/
    select?: ParceirosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParceirosInclude | null
  }



  /**
   * Model Usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    status: boolean | null
    Role: Role | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    status: boolean | null
    Role: Role | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    status: number
    Role: number
    _all: number
  }


  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
    Role?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
    Role?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
    Role?: true
    _all?: true
  }

  export type UsuariosAggregateArgs = {
    /**
     * Filter which Usuarios to aggregate.
     * 
    **/
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs = {
    where?: UsuariosWhereInput
    orderBy?: Enumerable<UsuariosOrderByWithAggregationInput>
    by: Array<UsuariosScalarFieldEnum>
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    id: string
    nome: string
    email: string
    senha: string
    status: boolean
    Role: Role
    _count: UsuariosCountAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    status?: boolean
    Role?: boolean
  }


  export type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuarios :
    S extends undefined ? never :
    S extends { include: any } & (UsuariosArgs | UsuariosFindManyArgs)
    ? Usuarios 
    : S extends { select: any } & (UsuariosArgs | UsuariosFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Usuarios ? Usuarios[P] : never
  } 
      : Usuarios


  type UsuariosCountArgs = Merge<
    Omit<UsuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }
  >

  export interface UsuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuarios'> extends True ? Prisma__UsuariosClient<UsuariosGetPayload<T>> : Prisma__UsuariosClient<UsuariosGetPayload<T> | null, null>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuarios'> extends True ? Prisma__UsuariosClient<UsuariosGetPayload<T>> : Prisma__UsuariosClient<UsuariosGetPayload<T> | null, null>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuariosFindManyArgs>(
      args?: SelectSubset<T, UsuariosFindManyArgs>
    ): PrismaPromise<Array<UsuariosGetPayload<T>>>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends UsuariosCreateArgs>(
      args: SelectSubset<T, UsuariosCreateArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuariosCreateManyArgs>(
      args?: SelectSubset<T, UsuariosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends UsuariosDeleteArgs>(
      args: SelectSubset<T, UsuariosDeleteArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuariosUpdateArgs>(
      args: SelectSubset<T, UsuariosUpdateArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuariosDeleteManyArgs>(
      args?: SelectSubset<T, UsuariosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuariosUpdateManyArgs>(
      args: SelectSubset<T, UsuariosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends UsuariosUpsertArgs>(
      args: SelectSubset<T, UsuariosUpsertArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * @param {UsuariosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const usuarios = await prisma.usuarios.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UsuariosFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Usuarios.
     * @param {UsuariosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const usuarios = await prisma.usuarios.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UsuariosAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Usuarios that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuariosFindUniqueOrThrowArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuariosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuarios base type for findUnique actions
   */
  export type UsuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * Filter, which Usuarios to fetch.
     * 
    **/
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios: findUnique
   */
  export interface UsuariosFindUniqueArgs extends UsuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios base type for findFirst actions
   */
  export type UsuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * Filter, which Usuarios to fetch.
     * 
    **/
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     * 
    **/
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     * 
    **/
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * Usuarios: findFirst
   */
  export interface UsuariosFindFirstArgs extends UsuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * Filter, which Usuarios to fetch.
     * 
    **/
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     * 
    **/
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * The data needed to create a Usuarios.
     * 
    **/
    data: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }


  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     * 
    **/
    data: Enumerable<UsuariosCreateManyInput>
  }


  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * The data needed to update a Usuarios.
     * 
    **/
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     * 
    **/
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     * 
    **/
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     * 
    **/
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     * 
    **/
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     * 
    **/
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }


  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
    /**
     * Filter which Usuarios to delete.
     * 
    **/
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     * 
    **/
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios findRaw
   */
  export type UsuariosFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Usuarios aggregateRaw
   */
  export type UsuariosAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Usuarios: findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs = UsuariosFindUniqueArgsBase
      

  /**
   * Usuarios: findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs = UsuariosFindFirstArgsBase
      

  /**
   * Usuarios without action
   */
  export type UsuariosArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     * 
    **/
    select?: UsuariosSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DemosScalarFieldEnum: {
    id: 'id',
    url: 'url',
    projetoId: 'projetoId'
  };

  export type DemosScalarFieldEnum = (typeof DemosScalarFieldEnum)[keyof typeof DemosScalarFieldEnum]


  export const EmpresasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricaoEmp: 'descricaoEmp',
    thumbnailEmp: 'thumbnailEmp'
  };

  export type EmpresasScalarFieldEnum = (typeof EmpresasScalarFieldEnum)[keyof typeof EmpresasScalarFieldEnum]


  export const ParceirosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    thumbnail: 'thumbnail',
    descricao: 'descricao',
    empresaId: 'empresaId'
  };

  export type ParceirosScalarFieldEnum = (typeof ParceirosScalarFieldEnum)[keyof typeof ParceirosScalarFieldEnum]


  export const ProjetosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    thumbnail: 'thumbnail',
    empresaId: 'empresaId'
  };

  export type ProjetosScalarFieldEnum = (typeof ProjetosScalarFieldEnum)[keyof typeof ProjetosScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ShowUpScalarFieldEnum: {
    id: 'id',
    url: 'url',
    projetoId: 'projetoId'
  };

  export type ShowUpScalarFieldEnum = (typeof ShowUpScalarFieldEnum)[keyof typeof ShowUpScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    status: 'status',
    Role: 'Role'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type EmpresasWhereInput = {
    AND?: Enumerable<EmpresasWhereInput>
    OR?: Enumerable<EmpresasWhereInput>
    NOT?: Enumerable<EmpresasWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    descricaoEmp?: StringFilter | string
    thumbnailEmp?: StringFilter | string
    projetos?: ProjetosListRelationFilter
    parceiros?: ParceirosListRelationFilter
  }

  export type EmpresasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricaoEmp?: SortOrder
    thumbnailEmp?: SortOrder
    projetos?: ProjetosOrderByRelationAggregateInput
    parceiros?: ParceirosOrderByRelationAggregateInput
  }

  export type EmpresasWhereUniqueInput = {
    id?: string
  }

  export type EmpresasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricaoEmp?: SortOrder
    thumbnailEmp?: SortOrder
    _count?: EmpresasCountOrderByAggregateInput
    _max?: EmpresasMaxOrderByAggregateInput
    _min?: EmpresasMinOrderByAggregateInput
  }

  export type EmpresasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmpresasScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmpresasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmpresasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    descricaoEmp?: StringWithAggregatesFilter | string
    thumbnailEmp?: StringWithAggregatesFilter | string
  }

  export type ProjetosWhereInput = {
    AND?: Enumerable<ProjetosWhereInput>
    OR?: Enumerable<ProjetosWhereInput>
    NOT?: Enumerable<ProjetosWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    descricao?: StringFilter | string
    thumbnail?: StringFilter | string
    demos?: DemosListRelationFilter
    showUp?: ShowUpListRelationFilter
    empresaId?: StringNullableFilter | string | null
    empresa?: XOR<EmpresasRelationFilter, EmpresasWhereInput> | null
  }

  export type ProjetosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    thumbnail?: SortOrder
    demos?: DemosOrderByRelationAggregateInput
    showUp?: ShowUpOrderByRelationAggregateInput
    empresaId?: SortOrder
    empresa?: EmpresasOrderByWithRelationInput
  }

  export type ProjetosWhereUniqueInput = {
    id?: string
  }

  export type ProjetosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    thumbnail?: SortOrder
    empresaId?: SortOrder
    _count?: ProjetosCountOrderByAggregateInput
    _max?: ProjetosMaxOrderByAggregateInput
    _min?: ProjetosMinOrderByAggregateInput
  }

  export type ProjetosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjetosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjetosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjetosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    thumbnail?: StringWithAggregatesFilter | string
    empresaId?: StringNullableWithAggregatesFilter | string | null
  }

  export type DemosWhereInput = {
    AND?: Enumerable<DemosWhereInput>
    OR?: Enumerable<DemosWhereInput>
    NOT?: Enumerable<DemosWhereInput>
    id?: StringFilter | string
    url?: StringFilter | string
    projetoId?: StringNullableFilter | string | null
    projeto?: XOR<ProjetosRelationFilter, ProjetosWhereInput> | null
  }

  export type DemosOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
    projeto?: ProjetosOrderByWithRelationInput
  }

  export type DemosWhereUniqueInput = {
    id?: string
  }

  export type DemosOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
    _count?: DemosCountOrderByAggregateInput
    _max?: DemosMaxOrderByAggregateInput
    _min?: DemosMinOrderByAggregateInput
  }

  export type DemosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DemosScalarWhereWithAggregatesInput>
    OR?: Enumerable<DemosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DemosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    projetoId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ShowUpWhereInput = {
    AND?: Enumerable<ShowUpWhereInput>
    OR?: Enumerable<ShowUpWhereInput>
    NOT?: Enumerable<ShowUpWhereInput>
    id?: StringFilter | string
    url?: StringFilter | string
    projetoId?: StringNullableFilter | string | null
    projeto?: XOR<ProjetosRelationFilter, ProjetosWhereInput> | null
  }

  export type ShowUpOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
    projeto?: ProjetosOrderByWithRelationInput
  }

  export type ShowUpWhereUniqueInput = {
    id?: string
  }

  export type ShowUpOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
    _count?: ShowUpCountOrderByAggregateInput
    _max?: ShowUpMaxOrderByAggregateInput
    _min?: ShowUpMinOrderByAggregateInput
  }

  export type ShowUpScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShowUpScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShowUpScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShowUpScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    projetoId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ParceirosWhereInput = {
    AND?: Enumerable<ParceirosWhereInput>
    OR?: Enumerable<ParceirosWhereInput>
    NOT?: Enumerable<ParceirosWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    thumbnail?: StringFilter | string
    descricao?: StringFilter | string
    empresa?: XOR<EmpresasRelationFilter, EmpresasWhereInput> | null
    empresaId?: StringNullableFilter | string | null
  }

  export type ParceirosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    thumbnail?: SortOrder
    descricao?: SortOrder
    empresa?: EmpresasOrderByWithRelationInput
    empresaId?: SortOrder
  }

  export type ParceirosWhereUniqueInput = {
    id?: string
  }

  export type ParceirosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    thumbnail?: SortOrder
    descricao?: SortOrder
    empresaId?: SortOrder
    _count?: ParceirosCountOrderByAggregateInput
    _max?: ParceirosMaxOrderByAggregateInput
    _min?: ParceirosMinOrderByAggregateInput
  }

  export type ParceirosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParceirosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParceirosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParceirosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    thumbnail?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    empresaId?: StringNullableWithAggregatesFilter | string | null
  }

  export type UsuariosWhereInput = {
    AND?: Enumerable<UsuariosWhereInput>
    OR?: Enumerable<UsuariosWhereInput>
    NOT?: Enumerable<UsuariosWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    senha?: StringFilter | string
    status?: BoolFilter | boolean
    Role?: EnumRoleFilter | Role
  }

  export type UsuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    Role?: SortOrder
  }

  export type UsuariosWhereUniqueInput = {
    id?: string
  }

  export type UsuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    Role?: SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    Role?: EnumRoleWithAggregatesFilter | Role
  }

  export type EmpresasCreateInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    projetos?: ProjetosCreateNestedManyWithoutEmpresaInput
    parceiros?: ParceirosCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasUncheckedCreateInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    projetos?: ProjetosUncheckedCreateNestedManyWithoutEmpresaInput
    parceiros?: ParceirosUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetosUpdateManyWithoutEmpresaNestedInput
    parceiros?: ParceirosUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresasUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetosUncheckedUpdateManyWithoutEmpresaNestedInput
    parceiros?: ParceirosUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresasCreateManyInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
  }

  export type EmpresasUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresasUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetosCreateInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosCreateNestedManyWithoutProjetoInput
    showUp?: ShowUpCreateNestedManyWithoutProjetoInput
    empresa?: EmpresasCreateNestedOneWithoutProjetosInput
  }

  export type ProjetosUncheckedCreateInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosUncheckedCreateNestedManyWithoutProjetoInput
    showUp?: ShowUpUncheckedCreateNestedManyWithoutProjetoInput
    empresaId?: string | null
  }

  export type ProjetosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUpdateManyWithoutProjetoNestedInput
    showUp?: ShowUpUpdateManyWithoutProjetoNestedInput
    empresa?: EmpresasUpdateOneWithoutProjetosNestedInput
  }

  export type ProjetosUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUncheckedUpdateManyWithoutProjetoNestedInput
    showUp?: ShowUpUncheckedUpdateManyWithoutProjetoNestedInput
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjetosCreateManyInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    empresaId?: string | null
  }

  export type ProjetosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetosUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DemosCreateInput = {
    id?: string
    url: string
    projeto?: ProjetosCreateNestedOneWithoutDemosInput
  }

  export type DemosUncheckedCreateInput = {
    id?: string
    url: string
    projetoId?: string | null
  }

  export type DemosUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    projeto?: ProjetosUpdateOneWithoutDemosNestedInput
  }

  export type DemosUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    projetoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DemosCreateManyInput = {
    id?: string
    url: string
    projetoId?: string | null
  }

  export type DemosUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DemosUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
    projetoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShowUpCreateInput = {
    id?: string
    url: string
    projeto?: ProjetosCreateNestedOneWithoutShowUpInput
  }

  export type ShowUpUncheckedCreateInput = {
    id?: string
    url: string
    projetoId?: string | null
  }

  export type ShowUpUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    projeto?: ProjetosUpdateOneWithoutShowUpNestedInput
  }

  export type ShowUpUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    projetoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShowUpCreateManyInput = {
    id?: string
    url: string
    projetoId?: string | null
  }

  export type ShowUpUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShowUpUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
    projetoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParceirosCreateInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
    empresa?: EmpresasCreateNestedOneWithoutParceirosInput
  }

  export type ParceirosUncheckedCreateInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
    empresaId?: string | null
  }

  export type ParceirosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    empresa?: EmpresasUpdateOneWithoutParceirosNestedInput
  }

  export type ParceirosUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParceirosCreateManyInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
    empresaId?: string | null
  }

  export type ParceirosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ParceirosUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuariosCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    status?: boolean
    Role?: Role
  }

  export type UsuariosUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    status?: boolean
    Role?: Role
  }

  export type UsuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UsuariosUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UsuariosCreateManyInput = {
    id?: string
    nome: string
    email: string
    senha: string
    status?: boolean
    Role?: Role
  }

  export type UsuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UsuariosUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    Role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ProjetosListRelationFilter = {
    every?: ProjetosWhereInput
    some?: ProjetosWhereInput
    none?: ProjetosWhereInput
  }

  export type ParceirosListRelationFilter = {
    every?: ParceirosWhereInput
    some?: ParceirosWhereInput
    none?: ParceirosWhereInput
  }

  export type ProjetosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParceirosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmpresasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricaoEmp?: SortOrder
    thumbnailEmp?: SortOrder
  }

  export type EmpresasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricaoEmp?: SortOrder
    thumbnailEmp?: SortOrder
  }

  export type EmpresasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricaoEmp?: SortOrder
    thumbnailEmp?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DemosListRelationFilter = {
    every?: DemosWhereInput
    some?: DemosWhereInput
    none?: DemosWhereInput
  }

  export type ShowUpListRelationFilter = {
    every?: ShowUpWhereInput
    some?: ShowUpWhereInput
    none?: ShowUpWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type EmpresasRelationFilter = {
    is?: EmpresasWhereInput | null
    isNot?: EmpresasWhereInput | null
  }

  export type DemosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShowUpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjetosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    thumbnail?: SortOrder
    empresaId?: SortOrder
  }

  export type ProjetosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    thumbnail?: SortOrder
    empresaId?: SortOrder
  }

  export type ProjetosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    thumbnail?: SortOrder
    empresaId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type ProjetosRelationFilter = {
    is?: ProjetosWhereInput | null
    isNot?: ProjetosWhereInput | null
  }

  export type DemosCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type DemosMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type DemosMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type ShowUpCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type ShowUpMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type ShowUpMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    projetoId?: SortOrder
  }

  export type ParceirosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    thumbnail?: SortOrder
    descricao?: SortOrder
    empresaId?: SortOrder
  }

  export type ParceirosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    thumbnail?: SortOrder
    descricao?: SortOrder
    empresaId?: SortOrder
  }

  export type ParceirosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    thumbnail?: SortOrder
    descricao?: SortOrder
    empresaId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UsuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    Role?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    Role?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    Role?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type ProjetosCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<Enumerable<ProjetosCreateWithoutEmpresaInput>, Enumerable<ProjetosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ProjetosCreateOrConnectWithoutEmpresaInput>
    createMany?: ProjetosCreateManyEmpresaInputEnvelope
    connect?: Enumerable<ProjetosWhereUniqueInput>
  }

  export type ParceirosCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<Enumerable<ParceirosCreateWithoutEmpresaInput>, Enumerable<ParceirosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ParceirosCreateOrConnectWithoutEmpresaInput>
    createMany?: ParceirosCreateManyEmpresaInputEnvelope
    connect?: Enumerable<ParceirosWhereUniqueInput>
  }

  export type ProjetosUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<Enumerable<ProjetosCreateWithoutEmpresaInput>, Enumerable<ProjetosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ProjetosCreateOrConnectWithoutEmpresaInput>
    createMany?: ProjetosCreateManyEmpresaInputEnvelope
    connect?: Enumerable<ProjetosWhereUniqueInput>
  }

  export type ParceirosUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<Enumerable<ParceirosCreateWithoutEmpresaInput>, Enumerable<ParceirosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ParceirosCreateOrConnectWithoutEmpresaInput>
    createMany?: ParceirosCreateManyEmpresaInputEnvelope
    connect?: Enumerable<ParceirosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProjetosUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<Enumerable<ProjetosCreateWithoutEmpresaInput>, Enumerable<ProjetosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ProjetosCreateOrConnectWithoutEmpresaInput>
    upsert?: Enumerable<ProjetosUpsertWithWhereUniqueWithoutEmpresaInput>
    createMany?: ProjetosCreateManyEmpresaInputEnvelope
    set?: Enumerable<ProjetosWhereUniqueInput>
    disconnect?: Enumerable<ProjetosWhereUniqueInput>
    delete?: Enumerable<ProjetosWhereUniqueInput>
    connect?: Enumerable<ProjetosWhereUniqueInput>
    update?: Enumerable<ProjetosUpdateWithWhereUniqueWithoutEmpresaInput>
    updateMany?: Enumerable<ProjetosUpdateManyWithWhereWithoutEmpresaInput>
    deleteMany?: Enumerable<ProjetosScalarWhereInput>
  }

  export type ParceirosUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<Enumerable<ParceirosCreateWithoutEmpresaInput>, Enumerable<ParceirosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ParceirosCreateOrConnectWithoutEmpresaInput>
    upsert?: Enumerable<ParceirosUpsertWithWhereUniqueWithoutEmpresaInput>
    createMany?: ParceirosCreateManyEmpresaInputEnvelope
    set?: Enumerable<ParceirosWhereUniqueInput>
    disconnect?: Enumerable<ParceirosWhereUniqueInput>
    delete?: Enumerable<ParceirosWhereUniqueInput>
    connect?: Enumerable<ParceirosWhereUniqueInput>
    update?: Enumerable<ParceirosUpdateWithWhereUniqueWithoutEmpresaInput>
    updateMany?: Enumerable<ParceirosUpdateManyWithWhereWithoutEmpresaInput>
    deleteMany?: Enumerable<ParceirosScalarWhereInput>
  }

  export type ProjetosUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<Enumerable<ProjetosCreateWithoutEmpresaInput>, Enumerable<ProjetosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ProjetosCreateOrConnectWithoutEmpresaInput>
    upsert?: Enumerable<ProjetosUpsertWithWhereUniqueWithoutEmpresaInput>
    createMany?: ProjetosCreateManyEmpresaInputEnvelope
    set?: Enumerable<ProjetosWhereUniqueInput>
    disconnect?: Enumerable<ProjetosWhereUniqueInput>
    delete?: Enumerable<ProjetosWhereUniqueInput>
    connect?: Enumerable<ProjetosWhereUniqueInput>
    update?: Enumerable<ProjetosUpdateWithWhereUniqueWithoutEmpresaInput>
    updateMany?: Enumerable<ProjetosUpdateManyWithWhereWithoutEmpresaInput>
    deleteMany?: Enumerable<ProjetosScalarWhereInput>
  }

  export type ParceirosUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<Enumerable<ParceirosCreateWithoutEmpresaInput>, Enumerable<ParceirosUncheckedCreateWithoutEmpresaInput>>
    connectOrCreate?: Enumerable<ParceirosCreateOrConnectWithoutEmpresaInput>
    upsert?: Enumerable<ParceirosUpsertWithWhereUniqueWithoutEmpresaInput>
    createMany?: ParceirosCreateManyEmpresaInputEnvelope
    set?: Enumerable<ParceirosWhereUniqueInput>
    disconnect?: Enumerable<ParceirosWhereUniqueInput>
    delete?: Enumerable<ParceirosWhereUniqueInput>
    connect?: Enumerable<ParceirosWhereUniqueInput>
    update?: Enumerable<ParceirosUpdateWithWhereUniqueWithoutEmpresaInput>
    updateMany?: Enumerable<ParceirosUpdateManyWithWhereWithoutEmpresaInput>
    deleteMany?: Enumerable<ParceirosScalarWhereInput>
  }

  export type DemosCreateNestedManyWithoutProjetoInput = {
    create?: XOR<Enumerable<DemosCreateWithoutProjetoInput>, Enumerable<DemosUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<DemosCreateOrConnectWithoutProjetoInput>
    createMany?: DemosCreateManyProjetoInputEnvelope
    connect?: Enumerable<DemosWhereUniqueInput>
  }

  export type ShowUpCreateNestedManyWithoutProjetoInput = {
    create?: XOR<Enumerable<ShowUpCreateWithoutProjetoInput>, Enumerable<ShowUpUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<ShowUpCreateOrConnectWithoutProjetoInput>
    createMany?: ShowUpCreateManyProjetoInputEnvelope
    connect?: Enumerable<ShowUpWhereUniqueInput>
  }

  export type EmpresasCreateNestedOneWithoutProjetosInput = {
    create?: XOR<EmpresasCreateWithoutProjetosInput, EmpresasUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: EmpresasCreateOrConnectWithoutProjetosInput
    connect?: EmpresasWhereUniqueInput
  }

  export type DemosUncheckedCreateNestedManyWithoutProjetoInput = {
    create?: XOR<Enumerable<DemosCreateWithoutProjetoInput>, Enumerable<DemosUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<DemosCreateOrConnectWithoutProjetoInput>
    createMany?: DemosCreateManyProjetoInputEnvelope
    connect?: Enumerable<DemosWhereUniqueInput>
  }

  export type ShowUpUncheckedCreateNestedManyWithoutProjetoInput = {
    create?: XOR<Enumerable<ShowUpCreateWithoutProjetoInput>, Enumerable<ShowUpUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<ShowUpCreateOrConnectWithoutProjetoInput>
    createMany?: ShowUpCreateManyProjetoInputEnvelope
    connect?: Enumerable<ShowUpWhereUniqueInput>
  }

  export type DemosUpdateManyWithoutProjetoNestedInput = {
    create?: XOR<Enumerable<DemosCreateWithoutProjetoInput>, Enumerable<DemosUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<DemosCreateOrConnectWithoutProjetoInput>
    upsert?: Enumerable<DemosUpsertWithWhereUniqueWithoutProjetoInput>
    createMany?: DemosCreateManyProjetoInputEnvelope
    set?: Enumerable<DemosWhereUniqueInput>
    disconnect?: Enumerable<DemosWhereUniqueInput>
    delete?: Enumerable<DemosWhereUniqueInput>
    connect?: Enumerable<DemosWhereUniqueInput>
    update?: Enumerable<DemosUpdateWithWhereUniqueWithoutProjetoInput>
    updateMany?: Enumerable<DemosUpdateManyWithWhereWithoutProjetoInput>
    deleteMany?: Enumerable<DemosScalarWhereInput>
  }

  export type ShowUpUpdateManyWithoutProjetoNestedInput = {
    create?: XOR<Enumerable<ShowUpCreateWithoutProjetoInput>, Enumerable<ShowUpUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<ShowUpCreateOrConnectWithoutProjetoInput>
    upsert?: Enumerable<ShowUpUpsertWithWhereUniqueWithoutProjetoInput>
    createMany?: ShowUpCreateManyProjetoInputEnvelope
    set?: Enumerable<ShowUpWhereUniqueInput>
    disconnect?: Enumerable<ShowUpWhereUniqueInput>
    delete?: Enumerable<ShowUpWhereUniqueInput>
    connect?: Enumerable<ShowUpWhereUniqueInput>
    update?: Enumerable<ShowUpUpdateWithWhereUniqueWithoutProjetoInput>
    updateMany?: Enumerable<ShowUpUpdateManyWithWhereWithoutProjetoInput>
    deleteMany?: Enumerable<ShowUpScalarWhereInput>
  }

  export type EmpresasUpdateOneWithoutProjetosNestedInput = {
    create?: XOR<EmpresasCreateWithoutProjetosInput, EmpresasUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: EmpresasCreateOrConnectWithoutProjetosInput
    upsert?: EmpresasUpsertWithoutProjetosInput
    disconnect?: boolean
    delete?: boolean
    connect?: EmpresasWhereUniqueInput
    update?: XOR<EmpresasUpdateWithoutProjetosInput, EmpresasUncheckedUpdateWithoutProjetosInput>
  }

  export type DemosUncheckedUpdateManyWithoutProjetoNestedInput = {
    create?: XOR<Enumerable<DemosCreateWithoutProjetoInput>, Enumerable<DemosUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<DemosCreateOrConnectWithoutProjetoInput>
    upsert?: Enumerable<DemosUpsertWithWhereUniqueWithoutProjetoInput>
    createMany?: DemosCreateManyProjetoInputEnvelope
    set?: Enumerable<DemosWhereUniqueInput>
    disconnect?: Enumerable<DemosWhereUniqueInput>
    delete?: Enumerable<DemosWhereUniqueInput>
    connect?: Enumerable<DemosWhereUniqueInput>
    update?: Enumerable<DemosUpdateWithWhereUniqueWithoutProjetoInput>
    updateMany?: Enumerable<DemosUpdateManyWithWhereWithoutProjetoInput>
    deleteMany?: Enumerable<DemosScalarWhereInput>
  }

  export type ShowUpUncheckedUpdateManyWithoutProjetoNestedInput = {
    create?: XOR<Enumerable<ShowUpCreateWithoutProjetoInput>, Enumerable<ShowUpUncheckedCreateWithoutProjetoInput>>
    connectOrCreate?: Enumerable<ShowUpCreateOrConnectWithoutProjetoInput>
    upsert?: Enumerable<ShowUpUpsertWithWhereUniqueWithoutProjetoInput>
    createMany?: ShowUpCreateManyProjetoInputEnvelope
    set?: Enumerable<ShowUpWhereUniqueInput>
    disconnect?: Enumerable<ShowUpWhereUniqueInput>
    delete?: Enumerable<ShowUpWhereUniqueInput>
    connect?: Enumerable<ShowUpWhereUniqueInput>
    update?: Enumerable<ShowUpUpdateWithWhereUniqueWithoutProjetoInput>
    updateMany?: Enumerable<ShowUpUpdateManyWithWhereWithoutProjetoInput>
    deleteMany?: Enumerable<ShowUpScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ProjetosCreateNestedOneWithoutDemosInput = {
    create?: XOR<ProjetosCreateWithoutDemosInput, ProjetosUncheckedCreateWithoutDemosInput>
    connectOrCreate?: ProjetosCreateOrConnectWithoutDemosInput
    connect?: ProjetosWhereUniqueInput
  }

  export type ProjetosUpdateOneWithoutDemosNestedInput = {
    create?: XOR<ProjetosCreateWithoutDemosInput, ProjetosUncheckedCreateWithoutDemosInput>
    connectOrCreate?: ProjetosCreateOrConnectWithoutDemosInput
    upsert?: ProjetosUpsertWithoutDemosInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjetosWhereUniqueInput
    update?: XOR<ProjetosUpdateWithoutDemosInput, ProjetosUncheckedUpdateWithoutDemosInput>
  }

  export type ProjetosCreateNestedOneWithoutShowUpInput = {
    create?: XOR<ProjetosCreateWithoutShowUpInput, ProjetosUncheckedCreateWithoutShowUpInput>
    connectOrCreate?: ProjetosCreateOrConnectWithoutShowUpInput
    connect?: ProjetosWhereUniqueInput
  }

  export type ProjetosUpdateOneWithoutShowUpNestedInput = {
    create?: XOR<ProjetosCreateWithoutShowUpInput, ProjetosUncheckedCreateWithoutShowUpInput>
    connectOrCreate?: ProjetosCreateOrConnectWithoutShowUpInput
    upsert?: ProjetosUpsertWithoutShowUpInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjetosWhereUniqueInput
    update?: XOR<ProjetosUpdateWithoutShowUpInput, ProjetosUncheckedUpdateWithoutShowUpInput>
  }

  export type EmpresasCreateNestedOneWithoutParceirosInput = {
    create?: XOR<EmpresasCreateWithoutParceirosInput, EmpresasUncheckedCreateWithoutParceirosInput>
    connectOrCreate?: EmpresasCreateOrConnectWithoutParceirosInput
    connect?: EmpresasWhereUniqueInput
  }

  export type EmpresasUpdateOneWithoutParceirosNestedInput = {
    create?: XOR<EmpresasCreateWithoutParceirosInput, EmpresasUncheckedCreateWithoutParceirosInput>
    connectOrCreate?: EmpresasCreateOrConnectWithoutParceirosInput
    upsert?: EmpresasUpsertWithoutParceirosInput
    disconnect?: boolean
    delete?: boolean
    connect?: EmpresasWhereUniqueInput
    update?: XOR<EmpresasUpdateWithoutParceirosInput, EmpresasUncheckedUpdateWithoutParceirosInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type ProjetosCreateWithoutEmpresaInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosCreateNestedManyWithoutProjetoInput
    showUp?: ShowUpCreateNestedManyWithoutProjetoInput
  }

  export type ProjetosUncheckedCreateWithoutEmpresaInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosUncheckedCreateNestedManyWithoutProjetoInput
    showUp?: ShowUpUncheckedCreateNestedManyWithoutProjetoInput
  }

  export type ProjetosCreateOrConnectWithoutEmpresaInput = {
    where: ProjetosWhereUniqueInput
    create: XOR<ProjetosCreateWithoutEmpresaInput, ProjetosUncheckedCreateWithoutEmpresaInput>
  }

  export type ProjetosCreateManyEmpresaInputEnvelope = {
    data: Enumerable<ProjetosCreateManyEmpresaInput>
  }

  export type ParceirosCreateWithoutEmpresaInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
  }

  export type ParceirosUncheckedCreateWithoutEmpresaInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
  }

  export type ParceirosCreateOrConnectWithoutEmpresaInput = {
    where: ParceirosWhereUniqueInput
    create: XOR<ParceirosCreateWithoutEmpresaInput, ParceirosUncheckedCreateWithoutEmpresaInput>
  }

  export type ParceirosCreateManyEmpresaInputEnvelope = {
    data: Enumerable<ParceirosCreateManyEmpresaInput>
  }

  export type ProjetosUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ProjetosWhereUniqueInput
    update: XOR<ProjetosUpdateWithoutEmpresaInput, ProjetosUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ProjetosCreateWithoutEmpresaInput, ProjetosUncheckedCreateWithoutEmpresaInput>
  }

  export type ProjetosUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ProjetosWhereUniqueInput
    data: XOR<ProjetosUpdateWithoutEmpresaInput, ProjetosUncheckedUpdateWithoutEmpresaInput>
  }

  export type ProjetosUpdateManyWithWhereWithoutEmpresaInput = {
    where: ProjetosScalarWhereInput
    data: XOR<ProjetosUpdateManyMutationInput, ProjetosUncheckedUpdateManyWithoutProjetosInput>
  }

  export type ProjetosScalarWhereInput = {
    AND?: Enumerable<ProjetosScalarWhereInput>
    OR?: Enumerable<ProjetosScalarWhereInput>
    NOT?: Enumerable<ProjetosScalarWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    descricao?: StringFilter | string
    thumbnail?: StringFilter | string
    empresaId?: StringNullableFilter | string | null
  }

  export type ParceirosUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ParceirosWhereUniqueInput
    update: XOR<ParceirosUpdateWithoutEmpresaInput, ParceirosUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ParceirosCreateWithoutEmpresaInput, ParceirosUncheckedCreateWithoutEmpresaInput>
  }

  export type ParceirosUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ParceirosWhereUniqueInput
    data: XOR<ParceirosUpdateWithoutEmpresaInput, ParceirosUncheckedUpdateWithoutEmpresaInput>
  }

  export type ParceirosUpdateManyWithWhereWithoutEmpresaInput = {
    where: ParceirosScalarWhereInput
    data: XOR<ParceirosUpdateManyMutationInput, ParceirosUncheckedUpdateManyWithoutParceirosInput>
  }

  export type ParceirosScalarWhereInput = {
    AND?: Enumerable<ParceirosScalarWhereInput>
    OR?: Enumerable<ParceirosScalarWhereInput>
    NOT?: Enumerable<ParceirosScalarWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    thumbnail?: StringFilter | string
    descricao?: StringFilter | string
    empresaId?: StringNullableFilter | string | null
  }

  export type DemosCreateWithoutProjetoInput = {
    id?: string
    url: string
  }

  export type DemosUncheckedCreateWithoutProjetoInput = {
    id?: string
    url: string
  }

  export type DemosCreateOrConnectWithoutProjetoInput = {
    where: DemosWhereUniqueInput
    create: XOR<DemosCreateWithoutProjetoInput, DemosUncheckedCreateWithoutProjetoInput>
  }

  export type DemosCreateManyProjetoInputEnvelope = {
    data: Enumerable<DemosCreateManyProjetoInput>
  }

  export type ShowUpCreateWithoutProjetoInput = {
    id?: string
    url: string
  }

  export type ShowUpUncheckedCreateWithoutProjetoInput = {
    id?: string
    url: string
  }

  export type ShowUpCreateOrConnectWithoutProjetoInput = {
    where: ShowUpWhereUniqueInput
    create: XOR<ShowUpCreateWithoutProjetoInput, ShowUpUncheckedCreateWithoutProjetoInput>
  }

  export type ShowUpCreateManyProjetoInputEnvelope = {
    data: Enumerable<ShowUpCreateManyProjetoInput>
  }

  export type EmpresasCreateWithoutProjetosInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    parceiros?: ParceirosCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    parceiros?: ParceirosUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasCreateOrConnectWithoutProjetosInput = {
    where: EmpresasWhereUniqueInput
    create: XOR<EmpresasCreateWithoutProjetosInput, EmpresasUncheckedCreateWithoutProjetosInput>
  }

  export type DemosUpsertWithWhereUniqueWithoutProjetoInput = {
    where: DemosWhereUniqueInput
    update: XOR<DemosUpdateWithoutProjetoInput, DemosUncheckedUpdateWithoutProjetoInput>
    create: XOR<DemosCreateWithoutProjetoInput, DemosUncheckedCreateWithoutProjetoInput>
  }

  export type DemosUpdateWithWhereUniqueWithoutProjetoInput = {
    where: DemosWhereUniqueInput
    data: XOR<DemosUpdateWithoutProjetoInput, DemosUncheckedUpdateWithoutProjetoInput>
  }

  export type DemosUpdateManyWithWhereWithoutProjetoInput = {
    where: DemosScalarWhereInput
    data: XOR<DemosUpdateManyMutationInput, DemosUncheckedUpdateManyWithoutDemosInput>
  }

  export type DemosScalarWhereInput = {
    AND?: Enumerable<DemosScalarWhereInput>
    OR?: Enumerable<DemosScalarWhereInput>
    NOT?: Enumerable<DemosScalarWhereInput>
    id?: StringFilter | string
    url?: StringFilter | string
    projetoId?: StringNullableFilter | string | null
  }

  export type ShowUpUpsertWithWhereUniqueWithoutProjetoInput = {
    where: ShowUpWhereUniqueInput
    update: XOR<ShowUpUpdateWithoutProjetoInput, ShowUpUncheckedUpdateWithoutProjetoInput>
    create: XOR<ShowUpCreateWithoutProjetoInput, ShowUpUncheckedCreateWithoutProjetoInput>
  }

  export type ShowUpUpdateWithWhereUniqueWithoutProjetoInput = {
    where: ShowUpWhereUniqueInput
    data: XOR<ShowUpUpdateWithoutProjetoInput, ShowUpUncheckedUpdateWithoutProjetoInput>
  }

  export type ShowUpUpdateManyWithWhereWithoutProjetoInput = {
    where: ShowUpScalarWhereInput
    data: XOR<ShowUpUpdateManyMutationInput, ShowUpUncheckedUpdateManyWithoutShowUpInput>
  }

  export type ShowUpScalarWhereInput = {
    AND?: Enumerable<ShowUpScalarWhereInput>
    OR?: Enumerable<ShowUpScalarWhereInput>
    NOT?: Enumerable<ShowUpScalarWhereInput>
    id?: StringFilter | string
    url?: StringFilter | string
    projetoId?: StringNullableFilter | string | null
  }

  export type EmpresasUpsertWithoutProjetosInput = {
    update: XOR<EmpresasUpdateWithoutProjetosInput, EmpresasUncheckedUpdateWithoutProjetosInput>
    create: XOR<EmpresasCreateWithoutProjetosInput, EmpresasUncheckedCreateWithoutProjetosInput>
  }

  export type EmpresasUpdateWithoutProjetosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    parceiros?: ParceirosUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresasUncheckedUpdateWithoutProjetosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    parceiros?: ParceirosUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ProjetosCreateWithoutDemosInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    showUp?: ShowUpCreateNestedManyWithoutProjetoInput
    empresa?: EmpresasCreateNestedOneWithoutProjetosInput
  }

  export type ProjetosUncheckedCreateWithoutDemosInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    showUp?: ShowUpUncheckedCreateNestedManyWithoutProjetoInput
    empresaId?: string | null
  }

  export type ProjetosCreateOrConnectWithoutDemosInput = {
    where: ProjetosWhereUniqueInput
    create: XOR<ProjetosCreateWithoutDemosInput, ProjetosUncheckedCreateWithoutDemosInput>
  }

  export type ProjetosUpsertWithoutDemosInput = {
    update: XOR<ProjetosUpdateWithoutDemosInput, ProjetosUncheckedUpdateWithoutDemosInput>
    create: XOR<ProjetosCreateWithoutDemosInput, ProjetosUncheckedCreateWithoutDemosInput>
  }

  export type ProjetosUpdateWithoutDemosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    showUp?: ShowUpUpdateManyWithoutProjetoNestedInput
    empresa?: EmpresasUpdateOneWithoutProjetosNestedInput
  }

  export type ProjetosUncheckedUpdateWithoutDemosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    showUp?: ShowUpUncheckedUpdateManyWithoutProjetoNestedInput
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjetosCreateWithoutShowUpInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosCreateNestedManyWithoutProjetoInput
    empresa?: EmpresasCreateNestedOneWithoutProjetosInput
  }

  export type ProjetosUncheckedCreateWithoutShowUpInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
    demos?: DemosUncheckedCreateNestedManyWithoutProjetoInput
    empresaId?: string | null
  }

  export type ProjetosCreateOrConnectWithoutShowUpInput = {
    where: ProjetosWhereUniqueInput
    create: XOR<ProjetosCreateWithoutShowUpInput, ProjetosUncheckedCreateWithoutShowUpInput>
  }

  export type ProjetosUpsertWithoutShowUpInput = {
    update: XOR<ProjetosUpdateWithoutShowUpInput, ProjetosUncheckedUpdateWithoutShowUpInput>
    create: XOR<ProjetosCreateWithoutShowUpInput, ProjetosUncheckedCreateWithoutShowUpInput>
  }

  export type ProjetosUpdateWithoutShowUpInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUpdateManyWithoutProjetoNestedInput
    empresa?: EmpresasUpdateOneWithoutProjetosNestedInput
  }

  export type ProjetosUncheckedUpdateWithoutShowUpInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUncheckedUpdateManyWithoutProjetoNestedInput
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmpresasCreateWithoutParceirosInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    projetos?: ProjetosCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasUncheckedCreateWithoutParceirosInput = {
    id?: string
    nome: string
    descricaoEmp: string
    thumbnailEmp: string
    projetos?: ProjetosUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresasCreateOrConnectWithoutParceirosInput = {
    where: EmpresasWhereUniqueInput
    create: XOR<EmpresasCreateWithoutParceirosInput, EmpresasUncheckedCreateWithoutParceirosInput>
  }

  export type EmpresasUpsertWithoutParceirosInput = {
    update: XOR<EmpresasUpdateWithoutParceirosInput, EmpresasUncheckedUpdateWithoutParceirosInput>
    create: XOR<EmpresasCreateWithoutParceirosInput, EmpresasUncheckedCreateWithoutParceirosInput>
  }

  export type EmpresasUpdateWithoutParceirosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetosUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresasUncheckedUpdateWithoutParceirosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricaoEmp?: StringFieldUpdateOperationsInput | string
    thumbnailEmp?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetosUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ProjetosCreateManyEmpresaInput = {
    id?: string
    nome: string
    descricao: string
    thumbnail: string
  }

  export type ParceirosCreateManyEmpresaInput = {
    id?: string
    nome: string
    thumbnail: string
    descricao: string
  }

  export type ProjetosUpdateWithoutEmpresaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUpdateManyWithoutProjetoNestedInput
    showUp?: ShowUpUpdateManyWithoutProjetoNestedInput
  }

  export type ProjetosUncheckedUpdateWithoutEmpresaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    demos?: DemosUncheckedUpdateManyWithoutProjetoNestedInput
    showUp?: ShowUpUncheckedUpdateManyWithoutProjetoNestedInput
  }

  export type ProjetosUncheckedUpdateManyWithoutProjetosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type ParceirosUpdateWithoutEmpresaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ParceirosUncheckedUpdateWithoutEmpresaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ParceirosUncheckedUpdateManyWithoutParceirosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DemosCreateManyProjetoInput = {
    id?: string
    url: string
  }

  export type ShowUpCreateManyProjetoInput = {
    id?: string
    url: string
  }

  export type DemosUpdateWithoutProjetoInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DemosUncheckedUpdateWithoutProjetoInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DemosUncheckedUpdateManyWithoutDemosInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShowUpUpdateWithoutProjetoInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShowUpUncheckedUpdateWithoutProjetoInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShowUpUncheckedUpdateManyWithoutShowUpInput = {
    url?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}